/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CommitActivityStatsInner {
  #[serde(rename = "days")]
  days: Option<Vec<i32>>,
  #[serde(rename = "total")]
  total: Option<i32>,
  #[serde(rename = "week")]
  week: Option<i32>
}

impl CommitActivityStatsInner {
  pub fn new() -> CommitActivityStatsInner {
    CommitActivityStatsInner {
      days: None,
      total: None,
      week: None
    }
  }

  pub fn set_days(&mut self, days: Vec<i32>) {
    self.days = Some(days);
  }

  pub fn with_days(mut self, days: Vec<i32>) -> CommitActivityStatsInner {
    self.days = Some(days);
    self
  }

  pub fn days(&self) -> Option<&Vec<i32>> {
    self.days.as_ref()
  }

  pub fn reset_days(&mut self) {
    self.days = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> CommitActivityStatsInner {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

  pub fn set_week(&mut self, week: i32) {
    self.week = Some(week);
  }

  pub fn with_week(mut self, week: i32) -> CommitActivityStatsInner {
    self.week = Some(week);
    self
  }

  pub fn week(&self) -> Option<&i32> {
    self.week.as_ref()
  }

  pub fn reset_week(&mut self) {
    self.week = None;
  }

}



