/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComparecommitsBaseCommitAuthor {
  #[serde(rename = "avatar_url")]
  avatar_url: Option<String>,
  #[serde(rename = "events_url")]
  events_url: Option<String>,
  #[serde(rename = "followers_url")]
  followers_url: Option<String>,
  #[serde(rename = "following_url")]
  following_url: Option<String>,
  #[serde(rename = "gists_url")]
  gists_url: Option<String>,
  #[serde(rename = "gravatar_id")]
  gravatar_id: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "login")]
  login: Option<String>,
  #[serde(rename = "organizations_url")]
  organizations_url: Option<String>,
  #[serde(rename = "received_events_url")]
  received_events_url: Option<String>,
  #[serde(rename = "repos_url")]
  repos_url: Option<String>,
  #[serde(rename = "site_admin")]
  site_admin: Option<bool>,
  #[serde(rename = "starred_url")]
  starred_url: Option<String>,
  #[serde(rename = "subscriptions_url")]
  subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl ComparecommitsBaseCommitAuthor {
  pub fn new() -> ComparecommitsBaseCommitAuthor {
    ComparecommitsBaseCommitAuthor {
      avatar_url: None,
      events_url: None,
      followers_url: None,
      following_url: None,
      gists_url: None,
      gravatar_id: None,
      html_url: None,
      id: None,
      login: None,
      organizations_url: None,
      received_events_url: None,
      repos_url: None,
      site_admin: None,
      starred_url: None,
      subscriptions_url: None,
      _type: None,
      url: None
    }
  }

  pub fn set_avatar_url(&mut self, avatar_url: String) {
    self.avatar_url = Some(avatar_url);
  }

  pub fn with_avatar_url(mut self, avatar_url: String) -> ComparecommitsBaseCommitAuthor {
    self.avatar_url = Some(avatar_url);
    self
  }

  pub fn avatar_url(&self) -> Option<&String> {
    self.avatar_url.as_ref()
  }

  pub fn reset_avatar_url(&mut self) {
    self.avatar_url = None;
  }

  pub fn set_events_url(&mut self, events_url: String) {
    self.events_url = Some(events_url);
  }

  pub fn with_events_url(mut self, events_url: String) -> ComparecommitsBaseCommitAuthor {
    self.events_url = Some(events_url);
    self
  }

  pub fn events_url(&self) -> Option<&String> {
    self.events_url.as_ref()
  }

  pub fn reset_events_url(&mut self) {
    self.events_url = None;
  }

  pub fn set_followers_url(&mut self, followers_url: String) {
    self.followers_url = Some(followers_url);
  }

  pub fn with_followers_url(mut self, followers_url: String) -> ComparecommitsBaseCommitAuthor {
    self.followers_url = Some(followers_url);
    self
  }

  pub fn followers_url(&self) -> Option<&String> {
    self.followers_url.as_ref()
  }

  pub fn reset_followers_url(&mut self) {
    self.followers_url = None;
  }

  pub fn set_following_url(&mut self, following_url: String) {
    self.following_url = Some(following_url);
  }

  pub fn with_following_url(mut self, following_url: String) -> ComparecommitsBaseCommitAuthor {
    self.following_url = Some(following_url);
    self
  }

  pub fn following_url(&self) -> Option<&String> {
    self.following_url.as_ref()
  }

  pub fn reset_following_url(&mut self) {
    self.following_url = None;
  }

  pub fn set_gists_url(&mut self, gists_url: String) {
    self.gists_url = Some(gists_url);
  }

  pub fn with_gists_url(mut self, gists_url: String) -> ComparecommitsBaseCommitAuthor {
    self.gists_url = Some(gists_url);
    self
  }

  pub fn gists_url(&self) -> Option<&String> {
    self.gists_url.as_ref()
  }

  pub fn reset_gists_url(&mut self) {
    self.gists_url = None;
  }

  pub fn set_gravatar_id(&mut self, gravatar_id: String) {
    self.gravatar_id = Some(gravatar_id);
  }

  pub fn with_gravatar_id(mut self, gravatar_id: String) -> ComparecommitsBaseCommitAuthor {
    self.gravatar_id = Some(gravatar_id);
    self
  }

  pub fn gravatar_id(&self) -> Option<&String> {
    self.gravatar_id.as_ref()
  }

  pub fn reset_gravatar_id(&mut self) {
    self.gravatar_id = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> ComparecommitsBaseCommitAuthor {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> ComparecommitsBaseCommitAuthor {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_login(&mut self, login: String) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: String) -> ComparecommitsBaseCommitAuthor {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&String> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

  pub fn set_organizations_url(&mut self, organizations_url: String) {
    self.organizations_url = Some(organizations_url);
  }

  pub fn with_organizations_url(mut self, organizations_url: String) -> ComparecommitsBaseCommitAuthor {
    self.organizations_url = Some(organizations_url);
    self
  }

  pub fn organizations_url(&self) -> Option<&String> {
    self.organizations_url.as_ref()
  }

  pub fn reset_organizations_url(&mut self) {
    self.organizations_url = None;
  }

  pub fn set_received_events_url(&mut self, received_events_url: String) {
    self.received_events_url = Some(received_events_url);
  }

  pub fn with_received_events_url(mut self, received_events_url: String) -> ComparecommitsBaseCommitAuthor {
    self.received_events_url = Some(received_events_url);
    self
  }

  pub fn received_events_url(&self) -> Option<&String> {
    self.received_events_url.as_ref()
  }

  pub fn reset_received_events_url(&mut self) {
    self.received_events_url = None;
  }

  pub fn set_repos_url(&mut self, repos_url: String) {
    self.repos_url = Some(repos_url);
  }

  pub fn with_repos_url(mut self, repos_url: String) -> ComparecommitsBaseCommitAuthor {
    self.repos_url = Some(repos_url);
    self
  }

  pub fn repos_url(&self) -> Option<&String> {
    self.repos_url.as_ref()
  }

  pub fn reset_repos_url(&mut self) {
    self.repos_url = None;
  }

  pub fn set_site_admin(&mut self, site_admin: bool) {
    self.site_admin = Some(site_admin);
  }

  pub fn with_site_admin(mut self, site_admin: bool) -> ComparecommitsBaseCommitAuthor {
    self.site_admin = Some(site_admin);
    self
  }

  pub fn site_admin(&self) -> Option<&bool> {
    self.site_admin.as_ref()
  }

  pub fn reset_site_admin(&mut self) {
    self.site_admin = None;
  }

  pub fn set_starred_url(&mut self, starred_url: String) {
    self.starred_url = Some(starred_url);
  }

  pub fn with_starred_url(mut self, starred_url: String) -> ComparecommitsBaseCommitAuthor {
    self.starred_url = Some(starred_url);
    self
  }

  pub fn starred_url(&self) -> Option<&String> {
    self.starred_url.as_ref()
  }

  pub fn reset_starred_url(&mut self) {
    self.starred_url = None;
  }

  pub fn set_subscriptions_url(&mut self, subscriptions_url: String) {
    self.subscriptions_url = Some(subscriptions_url);
  }

  pub fn with_subscriptions_url(mut self, subscriptions_url: String) -> ComparecommitsBaseCommitAuthor {
    self.subscriptions_url = Some(subscriptions_url);
    self
  }

  pub fn subscriptions_url(&self) -> Option<&String> {
    self.subscriptions_url.as_ref()
  }

  pub fn reset_subscriptions_url(&mut self) {
    self.subscriptions_url = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> ComparecommitsBaseCommitAuthor {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> ComparecommitsBaseCommitAuthor {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



