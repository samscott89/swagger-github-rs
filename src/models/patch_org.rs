/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PatchOrg {
  /// Billing email address. This address is not publicized.
  #[serde(rename = "billing_email")]
  billing_email: Option<String>,
  #[serde(rename = "company")]
  company: Option<String>,
  /// Publicly visible email address.
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "location")]
  location: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl PatchOrg {
  pub fn new() -> PatchOrg {
    PatchOrg {
      billing_email: None,
      company: None,
      email: None,
      location: None,
      name: None
    }
  }

  pub fn set_billing_email(&mut self, billing_email: String) {
    self.billing_email = Some(billing_email);
  }

  pub fn with_billing_email(mut self, billing_email: String) -> PatchOrg {
    self.billing_email = Some(billing_email);
    self
  }

  pub fn billing_email(&self) -> Option<&String> {
    self.billing_email.as_ref()
  }

  pub fn reset_billing_email(&mut self) {
    self.billing_email = None;
  }

  pub fn set_company(&mut self, company: String) {
    self.company = Some(company);
  }

  pub fn with_company(mut self, company: String) -> PatchOrg {
    self.company = Some(company);
    self
  }

  pub fn company(&self) -> Option<&String> {
    self.company.as_ref()
  }

  pub fn reset_company(&mut self) {
    self.company = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> PatchOrg {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> PatchOrg {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PatchOrg {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



