/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchissuesbykeywordIssues {
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "comments")]
  comments: Option<i32>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "gravatar_id")]
  gravatar_id: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "labels")]
  labels: Option<Vec<String>>,
  #[serde(rename = "number")]
  number: Option<i32>,
  #[serde(rename = "position")]
  position: Option<i32>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "user")]
  user: Option<String>,
  #[serde(rename = "votes")]
  votes: Option<i32>
}

impl SearchissuesbykeywordIssues {
  pub fn new() -> SearchissuesbykeywordIssues {
    SearchissuesbykeywordIssues {
      body: None,
      comments: None,
      created_at: None,
      gravatar_id: None,
      html_url: None,
      labels: None,
      number: None,
      position: None,
      state: None,
      title: None,
      updated_at: None,
      user: None,
      votes: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> SearchissuesbykeywordIssues {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_comments(&mut self, comments: i32) {
    self.comments = Some(comments);
  }

  pub fn with_comments(mut self, comments: i32) -> SearchissuesbykeywordIssues {
    self.comments = Some(comments);
    self
  }

  pub fn comments(&self) -> Option<&i32> {
    self.comments.as_ref()
  }

  pub fn reset_comments(&mut self) {
    self.comments = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> SearchissuesbykeywordIssues {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_gravatar_id(&mut self, gravatar_id: String) {
    self.gravatar_id = Some(gravatar_id);
  }

  pub fn with_gravatar_id(mut self, gravatar_id: String) -> SearchissuesbykeywordIssues {
    self.gravatar_id = Some(gravatar_id);
    self
  }

  pub fn gravatar_id(&self) -> Option<&String> {
    self.gravatar_id.as_ref()
  }

  pub fn reset_gravatar_id(&mut self) {
    self.gravatar_id = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> SearchissuesbykeywordIssues {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_labels(&mut self, labels: Vec<String>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<String>) -> SearchissuesbykeywordIssues {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<String>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_number(&mut self, number: i32) {
    self.number = Some(number);
  }

  pub fn with_number(mut self, number: i32) -> SearchissuesbykeywordIssues {
    self.number = Some(number);
    self
  }

  pub fn number(&self) -> Option<&i32> {
    self.number.as_ref()
  }

  pub fn reset_number(&mut self) {
    self.number = None;
  }

  pub fn set_position(&mut self, position: i32) {
    self.position = Some(position);
  }

  pub fn with_position(mut self, position: i32) -> SearchissuesbykeywordIssues {
    self.position = Some(position);
    self
  }

  pub fn position(&self) -> Option<&i32> {
    self.position.as_ref()
  }

  pub fn reset_position(&mut self) {
    self.position = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> SearchissuesbykeywordIssues {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> SearchissuesbykeywordIssues {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> SearchissuesbykeywordIssues {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> SearchissuesbykeywordIssues {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_votes(&mut self, votes: i32) {
    self.votes = Some(votes);
  }

  pub fn with_votes(mut self, votes: i32) -> SearchissuesbykeywordIssues {
    self.votes = Some(votes);
    self
  }

  pub fn votes(&self) -> Option<&i32> {
    self.votes.as_ref()
  }

  pub fn reset_votes(&mut self) {
    self.votes = None;
  }

}



