/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchusersItems {
  #[serde(rename = "avatar_url")]
  avatar_url: Option<String>,
  #[serde(rename = "followers_url")]
  followers_url: Option<String>,
  #[serde(rename = "gravatar_id")]
  gravatar_id: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "login")]
  login: Option<String>,
  #[serde(rename = "organizations_url")]
  organizations_url: Option<String>,
  #[serde(rename = "received_events_url")]
  received_events_url: Option<String>,
  #[serde(rename = "repos_url")]
  repos_url: Option<String>,
  #[serde(rename = "score")]
  score: Option<f32>,
  #[serde(rename = "subscriptions_url")]
  subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl SearchusersItems {
  pub fn new() -> SearchusersItems {
    SearchusersItems {
      avatar_url: None,
      followers_url: None,
      gravatar_id: None,
      html_url: None,
      id: None,
      login: None,
      organizations_url: None,
      received_events_url: None,
      repos_url: None,
      score: None,
      subscriptions_url: None,
      _type: None,
      url: None
    }
  }

  pub fn set_avatar_url(&mut self, avatar_url: String) {
    self.avatar_url = Some(avatar_url);
  }

  pub fn with_avatar_url(mut self, avatar_url: String) -> SearchusersItems {
    self.avatar_url = Some(avatar_url);
    self
  }

  pub fn avatar_url(&self) -> Option<&String> {
    self.avatar_url.as_ref()
  }

  pub fn reset_avatar_url(&mut self) {
    self.avatar_url = None;
  }

  pub fn set_followers_url(&mut self, followers_url: String) {
    self.followers_url = Some(followers_url);
  }

  pub fn with_followers_url(mut self, followers_url: String) -> SearchusersItems {
    self.followers_url = Some(followers_url);
    self
  }

  pub fn followers_url(&self) -> Option<&String> {
    self.followers_url.as_ref()
  }

  pub fn reset_followers_url(&mut self) {
    self.followers_url = None;
  }

  pub fn set_gravatar_id(&mut self, gravatar_id: String) {
    self.gravatar_id = Some(gravatar_id);
  }

  pub fn with_gravatar_id(mut self, gravatar_id: String) -> SearchusersItems {
    self.gravatar_id = Some(gravatar_id);
    self
  }

  pub fn gravatar_id(&self) -> Option<&String> {
    self.gravatar_id.as_ref()
  }

  pub fn reset_gravatar_id(&mut self) {
    self.gravatar_id = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> SearchusersItems {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> SearchusersItems {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_login(&mut self, login: String) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: String) -> SearchusersItems {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&String> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

  pub fn set_organizations_url(&mut self, organizations_url: String) {
    self.organizations_url = Some(organizations_url);
  }

  pub fn with_organizations_url(mut self, organizations_url: String) -> SearchusersItems {
    self.organizations_url = Some(organizations_url);
    self
  }

  pub fn organizations_url(&self) -> Option<&String> {
    self.organizations_url.as_ref()
  }

  pub fn reset_organizations_url(&mut self) {
    self.organizations_url = None;
  }

  pub fn set_received_events_url(&mut self, received_events_url: String) {
    self.received_events_url = Some(received_events_url);
  }

  pub fn with_received_events_url(mut self, received_events_url: String) -> SearchusersItems {
    self.received_events_url = Some(received_events_url);
    self
  }

  pub fn received_events_url(&self) -> Option<&String> {
    self.received_events_url.as_ref()
  }

  pub fn reset_received_events_url(&mut self) {
    self.received_events_url = None;
  }

  pub fn set_repos_url(&mut self, repos_url: String) {
    self.repos_url = Some(repos_url);
  }

  pub fn with_repos_url(mut self, repos_url: String) -> SearchusersItems {
    self.repos_url = Some(repos_url);
    self
  }

  pub fn repos_url(&self) -> Option<&String> {
    self.repos_url.as_ref()
  }

  pub fn reset_repos_url(&mut self) {
    self.repos_url = None;
  }

  pub fn set_score(&mut self, score: f32) {
    self.score = Some(score);
  }

  pub fn with_score(mut self, score: f32) -> SearchusersItems {
    self.score = Some(score);
    self
  }

  pub fn score(&self) -> Option<&f32> {
    self.score.as_ref()
  }

  pub fn reset_score(&mut self) {
    self.score = None;
  }

  pub fn set_subscriptions_url(&mut self, subscriptions_url: String) {
    self.subscriptions_url = Some(subscriptions_url);
  }

  pub fn with_subscriptions_url(mut self, subscriptions_url: String) -> SearchusersItems {
    self.subscriptions_url = Some(subscriptions_url);
    self
  }

  pub fn subscriptions_url(&self) -> Option<&String> {
    self.subscriptions_url.as_ref()
  }

  pub fn reset_subscriptions_url(&mut self) {
    self.subscriptions_url = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> SearchusersItems {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> SearchusersItems {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



