/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CompareCommits {
  #[serde(rename = "ahead_by")]
  ahead_by: Option<i32>,
  #[serde(rename = "base_commit")]
  base_commit: Option<::models::ComparecommitsBaseCommit>,
  #[serde(rename = "behind_by")]
  behind_by: Option<i32>,
  #[serde(rename = "commits")]
  commits: Option<Vec<::models::ComparecommitsBaseCommit>>,
  #[serde(rename = "diff_url")]
  diff_url: Option<String>,
  #[serde(rename = "files")]
  files: Option<Vec<::models::ComparecommitsFiles>>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "patch_url")]
  patch_url: Option<String>,
  #[serde(rename = "permalink_url")]
  permalink_url: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "total_commits")]
  total_commits: Option<i32>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl CompareCommits {
  pub fn new() -> CompareCommits {
    CompareCommits {
      ahead_by: None,
      base_commit: None,
      behind_by: None,
      commits: None,
      diff_url: None,
      files: None,
      html_url: None,
      patch_url: None,
      permalink_url: None,
      status: None,
      total_commits: None,
      url: None
    }
  }

  pub fn set_ahead_by(&mut self, ahead_by: i32) {
    self.ahead_by = Some(ahead_by);
  }

  pub fn with_ahead_by(mut self, ahead_by: i32) -> CompareCommits {
    self.ahead_by = Some(ahead_by);
    self
  }

  pub fn ahead_by(&self) -> Option<&i32> {
    self.ahead_by.as_ref()
  }

  pub fn reset_ahead_by(&mut self) {
    self.ahead_by = None;
  }

  pub fn set_base_commit(&mut self, base_commit: ::models::ComparecommitsBaseCommit) {
    self.base_commit = Some(base_commit);
  }

  pub fn with_base_commit(mut self, base_commit: ::models::ComparecommitsBaseCommit) -> CompareCommits {
    self.base_commit = Some(base_commit);
    self
  }

  pub fn base_commit(&self) -> Option<&::models::ComparecommitsBaseCommit> {
    self.base_commit.as_ref()
  }

  pub fn reset_base_commit(&mut self) {
    self.base_commit = None;
  }

  pub fn set_behind_by(&mut self, behind_by: i32) {
    self.behind_by = Some(behind_by);
  }

  pub fn with_behind_by(mut self, behind_by: i32) -> CompareCommits {
    self.behind_by = Some(behind_by);
    self
  }

  pub fn behind_by(&self) -> Option<&i32> {
    self.behind_by.as_ref()
  }

  pub fn reset_behind_by(&mut self) {
    self.behind_by = None;
  }

  pub fn set_commits(&mut self, commits: Vec<::models::ComparecommitsBaseCommit>) {
    self.commits = Some(commits);
  }

  pub fn with_commits(mut self, commits: Vec<::models::ComparecommitsBaseCommit>) -> CompareCommits {
    self.commits = Some(commits);
    self
  }

  pub fn commits(&self) -> Option<&Vec<::models::ComparecommitsBaseCommit>> {
    self.commits.as_ref()
  }

  pub fn reset_commits(&mut self) {
    self.commits = None;
  }

  pub fn set_diff_url(&mut self, diff_url: String) {
    self.diff_url = Some(diff_url);
  }

  pub fn with_diff_url(mut self, diff_url: String) -> CompareCommits {
    self.diff_url = Some(diff_url);
    self
  }

  pub fn diff_url(&self) -> Option<&String> {
    self.diff_url.as_ref()
  }

  pub fn reset_diff_url(&mut self) {
    self.diff_url = None;
  }

  pub fn set_files(&mut self, files: Vec<::models::ComparecommitsFiles>) {
    self.files = Some(files);
  }

  pub fn with_files(mut self, files: Vec<::models::ComparecommitsFiles>) -> CompareCommits {
    self.files = Some(files);
    self
  }

  pub fn files(&self) -> Option<&Vec<::models::ComparecommitsFiles>> {
    self.files.as_ref()
  }

  pub fn reset_files(&mut self) {
    self.files = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> CompareCommits {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_patch_url(&mut self, patch_url: String) {
    self.patch_url = Some(patch_url);
  }

  pub fn with_patch_url(mut self, patch_url: String) -> CompareCommits {
    self.patch_url = Some(patch_url);
    self
  }

  pub fn patch_url(&self) -> Option<&String> {
    self.patch_url.as_ref()
  }

  pub fn reset_patch_url(&mut self) {
    self.patch_url = None;
  }

  pub fn set_permalink_url(&mut self, permalink_url: String) {
    self.permalink_url = Some(permalink_url);
  }

  pub fn with_permalink_url(mut self, permalink_url: String) -> CompareCommits {
    self.permalink_url = Some(permalink_url);
    self
  }

  pub fn permalink_url(&self) -> Option<&String> {
    self.permalink_url.as_ref()
  }

  pub fn reset_permalink_url(&mut self) {
    self.permalink_url = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> CompareCommits {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_total_commits(&mut self, total_commits: i32) {
    self.total_commits = Some(total_commits);
  }

  pub fn with_total_commits(mut self, total_commits: i32) -> CompareCommits {
    self.total_commits = Some(total_commits);
    self
  }

  pub fn total_commits(&self) -> Option<&i32> {
    self.total_commits.as_ref()
  }

  pub fn reset_total_commits(&mut self) {
    self.total_commits = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> CompareCommits {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



