/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchissuesItems {
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "comments")]
  comments: Option<i32>,
  #[serde(rename = "comments_url")]
  comments_url: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "events_url")]
  events_url: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "labels")]
  labels: Option<Vec<::models::EventIssueLabels>>,
  #[serde(rename = "labels_url")]
  labels_url: Option<String>,
  #[serde(rename = "number")]
  number: Option<i32>,
  #[serde(rename = "pull_request")]
  pull_request: Option<Value>,
  #[serde(rename = "score")]
  score: Option<f32>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::MergesSuccessfulAuthor>
}

impl SearchissuesItems {
  pub fn new() -> SearchissuesItems {
    SearchissuesItems {
      body: None,
      comments: None,
      comments_url: None,
      created_at: None,
      events_url: None,
      html_url: None,
      id: None,
      labels: None,
      labels_url: None,
      number: None,
      pull_request: None,
      score: None,
      state: None,
      title: None,
      updated_at: None,
      url: None,
      user: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> SearchissuesItems {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_comments(&mut self, comments: i32) {
    self.comments = Some(comments);
  }

  pub fn with_comments(mut self, comments: i32) -> SearchissuesItems {
    self.comments = Some(comments);
    self
  }

  pub fn comments(&self) -> Option<&i32> {
    self.comments.as_ref()
  }

  pub fn reset_comments(&mut self) {
    self.comments = None;
  }

  pub fn set_comments_url(&mut self, comments_url: String) {
    self.comments_url = Some(comments_url);
  }

  pub fn with_comments_url(mut self, comments_url: String) -> SearchissuesItems {
    self.comments_url = Some(comments_url);
    self
  }

  pub fn comments_url(&self) -> Option<&String> {
    self.comments_url.as_ref()
  }

  pub fn reset_comments_url(&mut self) {
    self.comments_url = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> SearchissuesItems {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_events_url(&mut self, events_url: String) {
    self.events_url = Some(events_url);
  }

  pub fn with_events_url(mut self, events_url: String) -> SearchissuesItems {
    self.events_url = Some(events_url);
    self
  }

  pub fn events_url(&self) -> Option<&String> {
    self.events_url.as_ref()
  }

  pub fn reset_events_url(&mut self) {
    self.events_url = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> SearchissuesItems {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> SearchissuesItems {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_labels(&mut self, labels: Vec<::models::EventIssueLabels>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<::models::EventIssueLabels>) -> SearchissuesItems {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<::models::EventIssueLabels>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_labels_url(&mut self, labels_url: String) {
    self.labels_url = Some(labels_url);
  }

  pub fn with_labels_url(mut self, labels_url: String) -> SearchissuesItems {
    self.labels_url = Some(labels_url);
    self
  }

  pub fn labels_url(&self) -> Option<&String> {
    self.labels_url.as_ref()
  }

  pub fn reset_labels_url(&mut self) {
    self.labels_url = None;
  }

  pub fn set_number(&mut self, number: i32) {
    self.number = Some(number);
  }

  pub fn with_number(mut self, number: i32) -> SearchissuesItems {
    self.number = Some(number);
    self
  }

  pub fn number(&self) -> Option<&i32> {
    self.number.as_ref()
  }

  pub fn reset_number(&mut self) {
    self.number = None;
  }

  pub fn set_pull_request(&mut self, pull_request: Value) {
    self.pull_request = Some(pull_request);
  }

  pub fn with_pull_request(mut self, pull_request: Value) -> SearchissuesItems {
    self.pull_request = Some(pull_request);
    self
  }

  pub fn pull_request(&self) -> Option<&Value> {
    self.pull_request.as_ref()
  }

  pub fn reset_pull_request(&mut self) {
    self.pull_request = None;
  }

  pub fn set_score(&mut self, score: f32) {
    self.score = Some(score);
  }

  pub fn with_score(mut self, score: f32) -> SearchissuesItems {
    self.score = Some(score);
    self
  }

  pub fn score(&self) -> Option<&f32> {
    self.score.as_ref()
  }

  pub fn reset_score(&mut self) {
    self.score = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> SearchissuesItems {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> SearchissuesItems {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> SearchissuesItems {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> SearchissuesItems {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_user(&mut self, user: ::models::MergesSuccessfulAuthor) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::MergesSuccessfulAuthor) -> SearchissuesItems {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::MergesSuccessfulAuthor> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



