/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Blob {
  #[serde(rename = "content")]
  content: Option<String>,
  #[serde(rename = "encoding")]
  encoding: Option<String>,
  #[serde(rename = "sha")]
  sha: Option<String>,
  #[serde(rename = "size")]
  size: Option<i32>
}

impl Blob {
  pub fn new() -> Blob {
    Blob {
      content: None,
      encoding: None,
      sha: None,
      size: None
    }
  }

  pub fn set_content(&mut self, content: String) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: String) -> Blob {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&String> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

  pub fn set_encoding(&mut self, encoding: String) {
    self.encoding = Some(encoding);
  }

  pub fn with_encoding(mut self, encoding: String) -> Blob {
    self.encoding = Some(encoding);
    self
  }

  pub fn encoding(&self) -> Option<&String> {
    self.encoding.as_ref()
  }

  pub fn reset_encoding(&mut self) {
    self.encoding = None;
  }

  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> Blob {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> Blob {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

}



