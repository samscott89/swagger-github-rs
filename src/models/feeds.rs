/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Feeds {
  #[serde(rename = "_links")]
  _links: Option<::models::FeedsLinks>,
  #[serde(rename = "current_user_actor_url")]
  current_user_actor_url: Option<String>,
  #[serde(rename = "current_user_organization_url")]
  current_user_organization_url: Option<String>,
  #[serde(rename = "current_user_public")]
  current_user_public: Option<String>,
  #[serde(rename = "current_user_url")]
  current_user_url: Option<String>,
  #[serde(rename = "timeline_url")]
  timeline_url: Option<String>,
  #[serde(rename = "user_url")]
  user_url: Option<String>
}

impl Feeds {
  pub fn new() -> Feeds {
    Feeds {
      _links: None,
      current_user_actor_url: None,
      current_user_organization_url: None,
      current_user_public: None,
      current_user_url: None,
      timeline_url: None,
      user_url: None
    }
  }

  pub fn set__links(&mut self, _links: ::models::FeedsLinks) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::models::FeedsLinks) -> Feeds {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::models::FeedsLinks> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

  pub fn set_current_user_actor_url(&mut self, current_user_actor_url: String) {
    self.current_user_actor_url = Some(current_user_actor_url);
  }

  pub fn with_current_user_actor_url(mut self, current_user_actor_url: String) -> Feeds {
    self.current_user_actor_url = Some(current_user_actor_url);
    self
  }

  pub fn current_user_actor_url(&self) -> Option<&String> {
    self.current_user_actor_url.as_ref()
  }

  pub fn reset_current_user_actor_url(&mut self) {
    self.current_user_actor_url = None;
  }

  pub fn set_current_user_organization_url(&mut self, current_user_organization_url: String) {
    self.current_user_organization_url = Some(current_user_organization_url);
  }

  pub fn with_current_user_organization_url(mut self, current_user_organization_url: String) -> Feeds {
    self.current_user_organization_url = Some(current_user_organization_url);
    self
  }

  pub fn current_user_organization_url(&self) -> Option<&String> {
    self.current_user_organization_url.as_ref()
  }

  pub fn reset_current_user_organization_url(&mut self) {
    self.current_user_organization_url = None;
  }

  pub fn set_current_user_public(&mut self, current_user_public: String) {
    self.current_user_public = Some(current_user_public);
  }

  pub fn with_current_user_public(mut self, current_user_public: String) -> Feeds {
    self.current_user_public = Some(current_user_public);
    self
  }

  pub fn current_user_public(&self) -> Option<&String> {
    self.current_user_public.as_ref()
  }

  pub fn reset_current_user_public(&mut self) {
    self.current_user_public = None;
  }

  pub fn set_current_user_url(&mut self, current_user_url: String) {
    self.current_user_url = Some(current_user_url);
  }

  pub fn with_current_user_url(mut self, current_user_url: String) -> Feeds {
    self.current_user_url = Some(current_user_url);
    self
  }

  pub fn current_user_url(&self) -> Option<&String> {
    self.current_user_url.as_ref()
  }

  pub fn reset_current_user_url(&mut self) {
    self.current_user_url = None;
  }

  pub fn set_timeline_url(&mut self, timeline_url: String) {
    self.timeline_url = Some(timeline_url);
  }

  pub fn with_timeline_url(mut self, timeline_url: String) -> Feeds {
    self.timeline_url = Some(timeline_url);
    self
  }

  pub fn timeline_url(&self) -> Option<&String> {
    self.timeline_url.as_ref()
  }

  pub fn reset_timeline_url(&mut self) {
    self.timeline_url = None;
  }

  pub fn set_user_url(&mut self, user_url: String) {
    self.user_url = Some(user_url);
  }

  pub fn with_user_url(mut self, user_url: String) -> Feeds {
    self.user_url = Some(user_url);
    self
  }

  pub fn user_url(&self) -> Option<&String> {
    self.user_url.as_ref()
  }

  pub fn reset_user_url(&mut self) {
    self.user_url = None;
  }

}



