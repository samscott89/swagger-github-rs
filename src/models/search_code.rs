/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchCode {
  #[serde(rename = "items")]
  items: Option<Vec<::models::SearchcodeItems>>,
  #[serde(rename = "total_count")]
  total_count: Option<i32>
}

impl SearchCode {
  pub fn new() -> SearchCode {
    SearchCode {
      items: None,
      total_count: None
    }
  }

  pub fn set_items(&mut self, items: Vec<::models::SearchcodeItems>) {
    self.items = Some(items);
  }

  pub fn with_items(mut self, items: Vec<::models::SearchcodeItems>) -> SearchCode {
    self.items = Some(items);
    self
  }

  pub fn items(&self) -> Option<&Vec<::models::SearchcodeItems>> {
    self.items.as_ref()
  }

  pub fn reset_items(&mut self) {
    self.items = None;
  }

  pub fn set_total_count(&mut self, total_count: i32) {
    self.total_count = Some(total_count);
  }

  pub fn with_total_count(mut self, total_count: i32) -> SearchCode {
    self.total_count = Some(total_count);
    self
  }

  pub fn total_count(&self) -> Option<&i32> {
    self.total_count.as_ref()
  }

  pub fn reset_total_count(&mut self) {
    self.total_count = None;
  }

}



