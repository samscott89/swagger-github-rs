/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BranchesInner {
  #[serde(rename = "commit")]
  commit: Option<::models::BranchCommitCommitTree>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl BranchesInner {
  pub fn new() -> BranchesInner {
    BranchesInner {
      commit: None,
      name: None
    }
  }

  pub fn set_commit(&mut self, commit: ::models::BranchCommitCommitTree) {
    self.commit = Some(commit);
  }

  pub fn with_commit(mut self, commit: ::models::BranchCommitCommitTree) -> BranchesInner {
    self.commit = Some(commit);
    self
  }

  pub fn commit(&self) -> Option<&::models::BranchCommitCommitTree> {
    self.commit.as_ref()
  }

  pub fn reset_commit(&mut self) {
    self.commit = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> BranchesInner {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



