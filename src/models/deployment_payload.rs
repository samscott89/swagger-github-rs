/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeploymentPayload {
  #[serde(rename = "deploy_user")]
  deploy_user: Option<String>,
  #[serde(rename = "environment")]
  environment: Option<String>,
  #[serde(rename = "room_id")]
  room_id: Option<f32>
}

impl DeploymentPayload {
  pub fn new() -> DeploymentPayload {
    DeploymentPayload {
      deploy_user: None,
      environment: None,
      room_id: None
    }
  }

  pub fn set_deploy_user(&mut self, deploy_user: String) {
    self.deploy_user = Some(deploy_user);
  }

  pub fn with_deploy_user(mut self, deploy_user: String) -> DeploymentPayload {
    self.deploy_user = Some(deploy_user);
    self
  }

  pub fn deploy_user(&self) -> Option<&String> {
    self.deploy_user.as_ref()
  }

  pub fn reset_deploy_user(&mut self) {
    self.deploy_user = None;
  }

  pub fn set_environment(&mut self, environment: String) {
    self.environment = Some(environment);
  }

  pub fn with_environment(mut self, environment: String) -> DeploymentPayload {
    self.environment = Some(environment);
    self
  }

  pub fn environment(&self) -> Option<&String> {
    self.environment.as_ref()
  }

  pub fn reset_environment(&mut self) {
    self.environment = None;
  }

  pub fn set_room_id(&mut self, room_id: f32) {
    self.room_id = Some(room_id);
  }

  pub fn with_room_id(mut self, room_id: f32) -> DeploymentPayload {
    self.room_id = Some(room_id);
    self
  }

  pub fn room_id(&self) -> Option<&f32> {
    self.room_id.as_ref()
  }

  pub fn reset_room_id(&mut self) {
    self.room_id = None;
  }

}



