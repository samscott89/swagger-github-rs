/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Tag {
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "object")]
  object: Option<::models::HeadBranchObject>,
  #[serde(rename = "sha")]
  sha: Option<String>,
  #[serde(rename = "tag")]
  tag: Option<String>,
  #[serde(rename = "tagger")]
  tagger: Option<::models::BranchCommitCommitAuthor>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl Tag {
  pub fn new() -> Tag {
    Tag {
      message: None,
      object: None,
      sha: None,
      tag: None,
      tagger: None,
      url: None
    }
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> Tag {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_object(&mut self, object: ::models::HeadBranchObject) {
    self.object = Some(object);
  }

  pub fn with_object(mut self, object: ::models::HeadBranchObject) -> Tag {
    self.object = Some(object);
    self
  }

  pub fn object(&self) -> Option<&::models::HeadBranchObject> {
    self.object.as_ref()
  }

  pub fn reset_object(&mut self) {
    self.object = None;
  }

  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> Tag {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

  pub fn set_tag(&mut self, tag: String) {
    self.tag = Some(tag);
  }

  pub fn with_tag(mut self, tag: String) -> Tag {
    self.tag = Some(tag);
    self
  }

  pub fn tag(&self) -> Option<&String> {
    self.tag.as_ref()
  }

  pub fn reset_tag(&mut self) {
    self.tag = None;
  }

  pub fn set_tagger(&mut self, tagger: ::models::BranchCommitCommitAuthor) {
    self.tagger = Some(tagger);
  }

  pub fn with_tagger(mut self, tagger: ::models::BranchCommitCommitAuthor) -> Tag {
    self.tagger = Some(tagger);
    self
  }

  pub fn tagger(&self) -> Option<&::models::BranchCommitCommitAuthor> {
    self.tagger.as_ref()
  }

  pub fn reset_tagger(&mut self) {
    self.tagger = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> Tag {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



