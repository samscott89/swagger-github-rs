/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PostGist {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "files")]
  files: Option<::models::PostGistFiles>,
  #[serde(rename = "public")]
  public: Option<bool>
}

impl PostGist {
  pub fn new() -> PostGist {
    PostGist {
      description: None,
      files: None,
      public: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> PostGist {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_files(&mut self, files: ::models::PostGistFiles) {
    self.files = Some(files);
  }

  pub fn with_files(mut self, files: ::models::PostGistFiles) -> PostGist {
    self.files = Some(files);
    self
  }

  pub fn files(&self) -> Option<&::models::PostGistFiles> {
    self.files.as_ref()
  }

  pub fn reset_files(&mut self) {
    self.files = None;
  }

  pub fn set_public(&mut self, public: bool) {
    self.public = Some(public);
  }

  pub fn with_public(mut self, public: bool) -> PostGist {
    self.public = Some(public);
    self
  }

  pub fn public(&self) -> Option<&bool> {
    self.public.as_ref()
  }

  pub fn reset_public(&mut self) {
    self.public = None;
  }

}



