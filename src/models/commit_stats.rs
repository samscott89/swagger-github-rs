/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CommitStats {
  #[serde(rename = "additions")]
  additions: Option<i32>,
  #[serde(rename = "deletions")]
  deletions: Option<i32>,
  #[serde(rename = "total")]
  total: Option<i32>
}

impl CommitStats {
  pub fn new() -> CommitStats {
    CommitStats {
      additions: None,
      deletions: None,
      total: None
    }
  }

  pub fn set_additions(&mut self, additions: i32) {
    self.additions = Some(additions);
  }

  pub fn with_additions(mut self, additions: i32) -> CommitStats {
    self.additions = Some(additions);
    self
  }

  pub fn additions(&self) -> Option<&i32> {
    self.additions.as_ref()
  }

  pub fn reset_additions(&mut self) {
    self.additions = None;
  }

  pub fn set_deletions(&mut self, deletions: i32) {
    self.deletions = Some(deletions);
  }

  pub fn with_deletions(mut self, deletions: i32) -> CommitStats {
    self.deletions = Some(deletions);
    self
  }

  pub fn deletions(&self) -> Option<&i32> {
    self.deletions.as_ref()
  }

  pub fn reset_deletions(&mut self) {
    self.deletions = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> CommitStats {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

}



