/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TeamslistInner {
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "members_count")]
  members_count: Option<i32>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "organization")]
  organization: Option<::models::TeamslistInnerOrganization>,
  #[serde(rename = "permission")]
  permission: Option<String>,
  #[serde(rename = "repos_count")]
  repos_count: Option<i32>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl TeamslistInner {
  pub fn new() -> TeamslistInner {
    TeamslistInner {
      id: None,
      members_count: None,
      name: None,
      organization: None,
      permission: None,
      repos_count: None,
      url: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> TeamslistInner {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_members_count(&mut self, members_count: i32) {
    self.members_count = Some(members_count);
  }

  pub fn with_members_count(mut self, members_count: i32) -> TeamslistInner {
    self.members_count = Some(members_count);
    self
  }

  pub fn members_count(&self) -> Option<&i32> {
    self.members_count.as_ref()
  }

  pub fn reset_members_count(&mut self) {
    self.members_count = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> TeamslistInner {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_organization(&mut self, organization: ::models::TeamslistInnerOrganization) {
    self.organization = Some(organization);
  }

  pub fn with_organization(mut self, organization: ::models::TeamslistInnerOrganization) -> TeamslistInner {
    self.organization = Some(organization);
    self
  }

  pub fn organization(&self) -> Option<&::models::TeamslistInnerOrganization> {
    self.organization.as_ref()
  }

  pub fn reset_organization(&mut self) {
    self.organization = None;
  }

  pub fn set_permission(&mut self, permission: String) {
    self.permission = Some(permission);
  }

  pub fn with_permission(mut self, permission: String) -> TeamslistInner {
    self.permission = Some(permission);
    self
  }

  pub fn permission(&self) -> Option<&String> {
    self.permission.as_ref()
  }

  pub fn reset_permission(&mut self) {
    self.permission = None;
  }

  pub fn set_repos_count(&mut self, repos_count: i32) {
    self.repos_count = Some(repos_count);
  }

  pub fn with_repos_count(mut self, repos_count: i32) -> TeamslistInner {
    self.repos_count = Some(repos_count);
    self
  }

  pub fn repos_count(&self) -> Option<&i32> {
    self.repos_count.as_ref()
  }

  pub fn reset_repos_count(&mut self) {
    self.repos_count = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> TeamslistInner {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



