/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Tags {
  /// String of the tag message.
  #[serde(rename = "message")]
  message: String,
  /// String of the SHA of the git object this is tagging.
  #[serde(rename = "object")]
  object: String,
  #[serde(rename = "tag")]
  tag: String,
  #[serde(rename = "tagger")]
  tagger: ::models::TagsTagger,
  /// String of the type of the object weâ€™re tagging. Normally this is a commit but it can also be a tree or a blob.
  #[serde(rename = "type")]
  _type: String
}

impl Tags {
  pub fn new(message: String, object: String, tag: String, tagger: ::models::TagsTagger, _type: String) -> Tags {
    Tags {
      message: message,
      object: object,
      tag: tag,
      tagger: tagger,
      _type: _type
    }
  }

  pub fn set_message(&mut self, message: String) {
    self.message = message;
  }

  pub fn with_message(mut self, message: String) -> Tags {
    self.message = message;
    self
  }

  pub fn message(&self) -> &String {
    &self.message
  }


  pub fn set_object(&mut self, object: String) {
    self.object = object;
  }

  pub fn with_object(mut self, object: String) -> Tags {
    self.object = object;
    self
  }

  pub fn object(&self) -> &String {
    &self.object
  }


  pub fn set_tag(&mut self, tag: String) {
    self.tag = tag;
  }

  pub fn with_tag(mut self, tag: String) -> Tags {
    self.tag = tag;
    self
  }

  pub fn tag(&self) -> &String {
    &self.tag
  }


  pub fn set_tagger(&mut self, tagger: ::models::TagsTagger) {
    self.tagger = tagger;
  }

  pub fn with_tagger(mut self, tagger: ::models::TagsTagger) -> Tags {
    self.tagger = tagger;
    self
  }

  pub fn tagger(&self) -> &::models::TagsTagger {
    &self.tagger
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> Tags {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



