/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NotificationsRepository {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "fork")]
  fork: Option<bool>,
  #[serde(rename = "full_name")]
  full_name: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "owner")]
  owner: Option<::models::BranchCommitAuthor>,
  #[serde(rename = "private")]
  private: Option<bool>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl NotificationsRepository {
  pub fn new() -> NotificationsRepository {
    NotificationsRepository {
      description: None,
      fork: None,
      full_name: None,
      html_url: None,
      id: None,
      name: None,
      owner: None,
      private: None,
      url: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> NotificationsRepository {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_fork(&mut self, fork: bool) {
    self.fork = Some(fork);
  }

  pub fn with_fork(mut self, fork: bool) -> NotificationsRepository {
    self.fork = Some(fork);
    self
  }

  pub fn fork(&self) -> Option<&bool> {
    self.fork.as_ref()
  }

  pub fn reset_fork(&mut self) {
    self.fork = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> NotificationsRepository {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> NotificationsRepository {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> NotificationsRepository {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> NotificationsRepository {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_owner(&mut self, owner: ::models::BranchCommitAuthor) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: ::models::BranchCommitAuthor) -> NotificationsRepository {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&::models::BranchCommitAuthor> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> NotificationsRepository {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> NotificationsRepository {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



