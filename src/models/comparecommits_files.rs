/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComparecommitsFiles {
  #[serde(rename = "additions")]
  additions: Option<i32>,
  #[serde(rename = "blob_url")]
  blob_url: Option<String>,
  #[serde(rename = "changes")]
  changes: Option<i32>,
  #[serde(rename = "contents_url")]
  contents_url: Option<String>,
  #[serde(rename = "deletions")]
  deletions: Option<i32>,
  #[serde(rename = "filename")]
  filename: Option<String>,
  #[serde(rename = "patch")]
  patch: Option<String>,
  #[serde(rename = "raw_url")]
  raw_url: Option<String>,
  #[serde(rename = "sha")]
  sha: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>
}

impl ComparecommitsFiles {
  pub fn new() -> ComparecommitsFiles {
    ComparecommitsFiles {
      additions: None,
      blob_url: None,
      changes: None,
      contents_url: None,
      deletions: None,
      filename: None,
      patch: None,
      raw_url: None,
      sha: None,
      status: None
    }
  }

  pub fn set_additions(&mut self, additions: i32) {
    self.additions = Some(additions);
  }

  pub fn with_additions(mut self, additions: i32) -> ComparecommitsFiles {
    self.additions = Some(additions);
    self
  }

  pub fn additions(&self) -> Option<&i32> {
    self.additions.as_ref()
  }

  pub fn reset_additions(&mut self) {
    self.additions = None;
  }

  pub fn set_blob_url(&mut self, blob_url: String) {
    self.blob_url = Some(blob_url);
  }

  pub fn with_blob_url(mut self, blob_url: String) -> ComparecommitsFiles {
    self.blob_url = Some(blob_url);
    self
  }

  pub fn blob_url(&self) -> Option<&String> {
    self.blob_url.as_ref()
  }

  pub fn reset_blob_url(&mut self) {
    self.blob_url = None;
  }

  pub fn set_changes(&mut self, changes: i32) {
    self.changes = Some(changes);
  }

  pub fn with_changes(mut self, changes: i32) -> ComparecommitsFiles {
    self.changes = Some(changes);
    self
  }

  pub fn changes(&self) -> Option<&i32> {
    self.changes.as_ref()
  }

  pub fn reset_changes(&mut self) {
    self.changes = None;
  }

  pub fn set_contents_url(&mut self, contents_url: String) {
    self.contents_url = Some(contents_url);
  }

  pub fn with_contents_url(mut self, contents_url: String) -> ComparecommitsFiles {
    self.contents_url = Some(contents_url);
    self
  }

  pub fn contents_url(&self) -> Option<&String> {
    self.contents_url.as_ref()
  }

  pub fn reset_contents_url(&mut self) {
    self.contents_url = None;
  }

  pub fn set_deletions(&mut self, deletions: i32) {
    self.deletions = Some(deletions);
  }

  pub fn with_deletions(mut self, deletions: i32) -> ComparecommitsFiles {
    self.deletions = Some(deletions);
    self
  }

  pub fn deletions(&self) -> Option<&i32> {
    self.deletions.as_ref()
  }

  pub fn reset_deletions(&mut self) {
    self.deletions = None;
  }

  pub fn set_filename(&mut self, filename: String) {
    self.filename = Some(filename);
  }

  pub fn with_filename(mut self, filename: String) -> ComparecommitsFiles {
    self.filename = Some(filename);
    self
  }

  pub fn filename(&self) -> Option<&String> {
    self.filename.as_ref()
  }

  pub fn reset_filename(&mut self) {
    self.filename = None;
  }

  pub fn set_patch(&mut self, patch: String) {
    self.patch = Some(patch);
  }

  pub fn with_patch(mut self, patch: String) -> ComparecommitsFiles {
    self.patch = Some(patch);
    self
  }

  pub fn patch(&self) -> Option<&String> {
    self.patch.as_ref()
  }

  pub fn reset_patch(&mut self) {
    self.patch = None;
  }

  pub fn set_raw_url(&mut self, raw_url: String) {
    self.raw_url = Some(raw_url);
  }

  pub fn with_raw_url(mut self, raw_url: String) -> ComparecommitsFiles {
    self.raw_url = Some(raw_url);
    self
  }

  pub fn raw_url(&self) -> Option<&String> {
    self.raw_url.as_ref()
  }

  pub fn reset_raw_url(&mut self) {
    self.raw_url = None;
  }

  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> ComparecommitsFiles {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> ComparecommitsFiles {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

}



