/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MergesBody {
  #[serde(rename = "base")]
  base: Option<String>,
  #[serde(rename = "commit_message")]
  commit_message: Option<String>,
  #[serde(rename = "head")]
  head: Option<String>
}

impl MergesBody {
  pub fn new() -> MergesBody {
    MergesBody {
      base: None,
      commit_message: None,
      head: None
    }
  }

  pub fn set_base(&mut self, base: String) {
    self.base = Some(base);
  }

  pub fn with_base(mut self, base: String) -> MergesBody {
    self.base = Some(base);
    self
  }

  pub fn base(&self) -> Option<&String> {
    self.base.as_ref()
  }

  pub fn reset_base(&mut self) {
    self.base = None;
  }

  pub fn set_commit_message(&mut self, commit_message: String) {
    self.commit_message = Some(commit_message);
  }

  pub fn with_commit_message(mut self, commit_message: String) -> MergesBody {
    self.commit_message = Some(commit_message);
    self
  }

  pub fn commit_message(&self) -> Option<&String> {
    self.commit_message.as_ref()
  }

  pub fn reset_commit_message(&mut self) {
    self.commit_message = None;
  }

  pub fn set_head(&mut self, head: String) {
    self.head = Some(head);
  }

  pub fn with_head(mut self, head: String) -> MergesBody {
    self.head = Some(head);
    self
  }

  pub fn head(&self) -> Option<&String> {
    self.head.as_ref()
  }

  pub fn reset_head(&mut self) {
    self.head = None;
  }

}



