/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HookBody {
  #[serde(rename = "active")]
  active: Option<bool>,
  #[serde(rename = "add_events")]
  add_events: Option<Vec<String>>
}

impl HookBody {
  pub fn new() -> HookBody {
    HookBody {
      active: None,
      add_events: None
    }
  }

  pub fn set_active(&mut self, active: bool) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: bool) -> HookBody {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&bool> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_add_events(&mut self, add_events: Vec<String>) {
    self.add_events = Some(add_events);
  }

  pub fn with_add_events(mut self, add_events: Vec<String>) -> HookBody {
    self.add_events = Some(add_events);
    self
  }

  pub fn add_events(&self) -> Option<&Vec<String>> {
    self.add_events.as_ref()
  }

  pub fn reset_add_events(&mut self) {
    self.add_events = None;
  }

}



