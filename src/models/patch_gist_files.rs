/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PatchGistFiles {
  #[serde(rename = "delete_this_file.txt")]
  delete_this_file_txt: Option<String>,
  #[serde(rename = "file1.txt")]
  file1_txt: Option<::models::PatchGistFilesFile1Txt>,
  #[serde(rename = "new_file.txt")]
  new_file_txt: Option<::models::PatchGistFilesFile1Txt>,
  #[serde(rename = "old_name.txt")]
  old_name_txt: Option<::models::PatchGistFilesOldNameTxt>
}

impl PatchGistFiles {
  pub fn new() -> PatchGistFiles {
    PatchGistFiles {
      delete_this_file_txt: None,
      file1_txt: None,
      new_file_txt: None,
      old_name_txt: None
    }
  }

  pub fn set_delete_this_file_txt(&mut self, delete_this_file_txt: String) {
    self.delete_this_file_txt = Some(delete_this_file_txt);
  }

  pub fn with_delete_this_file_txt(mut self, delete_this_file_txt: String) -> PatchGistFiles {
    self.delete_this_file_txt = Some(delete_this_file_txt);
    self
  }

  pub fn delete_this_file_txt(&self) -> Option<&String> {
    self.delete_this_file_txt.as_ref()
  }

  pub fn reset_delete_this_file_txt(&mut self) {
    self.delete_this_file_txt = None;
  }

  pub fn set_file1_txt(&mut self, file1_txt: ::models::PatchGistFilesFile1Txt) {
    self.file1_txt = Some(file1_txt);
  }

  pub fn with_file1_txt(mut self, file1_txt: ::models::PatchGistFilesFile1Txt) -> PatchGistFiles {
    self.file1_txt = Some(file1_txt);
    self
  }

  pub fn file1_txt(&self) -> Option<&::models::PatchGistFilesFile1Txt> {
    self.file1_txt.as_ref()
  }

  pub fn reset_file1_txt(&mut self) {
    self.file1_txt = None;
  }

  pub fn set_new_file_txt(&mut self, new_file_txt: ::models::PatchGistFilesFile1Txt) {
    self.new_file_txt = Some(new_file_txt);
  }

  pub fn with_new_file_txt(mut self, new_file_txt: ::models::PatchGistFilesFile1Txt) -> PatchGistFiles {
    self.new_file_txt = Some(new_file_txt);
    self
  }

  pub fn new_file_txt(&self) -> Option<&::models::PatchGistFilesFile1Txt> {
    self.new_file_txt.as_ref()
  }

  pub fn reset_new_file_txt(&mut self) {
    self.new_file_txt = None;
  }

  pub fn set_old_name_txt(&mut self, old_name_txt: ::models::PatchGistFilesOldNameTxt) {
    self.old_name_txt = Some(old_name_txt);
  }

  pub fn with_old_name_txt(mut self, old_name_txt: ::models::PatchGistFilesOldNameTxt) -> PatchGistFiles {
    self.old_name_txt = Some(old_name_txt);
    self
  }

  pub fn old_name_txt(&self) -> Option<&::models::PatchGistFilesOldNameTxt> {
    self.old_name_txt.as_ref()
  }

  pub fn reset_old_name_txt(&mut self) {
    self.old_name_txt = None;
  }

}



