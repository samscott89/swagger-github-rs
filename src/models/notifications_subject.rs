/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NotificationsSubject {
  #[serde(rename = "latest_comment_url")]
  latest_comment_url: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl NotificationsSubject {
  pub fn new() -> NotificationsSubject {
    NotificationsSubject {
      latest_comment_url: None,
      title: None,
      _type: None,
      url: None
    }
  }

  pub fn set_latest_comment_url(&mut self, latest_comment_url: String) {
    self.latest_comment_url = Some(latest_comment_url);
  }

  pub fn with_latest_comment_url(mut self, latest_comment_url: String) -> NotificationsSubject {
    self.latest_comment_url = Some(latest_comment_url);
    self
  }

  pub fn latest_comment_url(&self) -> Option<&String> {
    self.latest_comment_url.as_ref()
  }

  pub fn reset_latest_comment_url(&mut self) {
    self.latest_comment_url = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> NotificationsSubject {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> NotificationsSubject {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> NotificationsSubject {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



