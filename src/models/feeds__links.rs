/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeedsLinks {
  #[serde(rename = "current_user")]
  current_user: Option<::models::FeedsLinksCurrentUser>,
  #[serde(rename = "current_user_actor")]
  current_user_actor: Option<::models::FeedsLinksCurrentUser>,
  #[serde(rename = "current_user_organization")]
  current_user_organization: Option<::models::FeedsLinksCurrentUser>,
  #[serde(rename = "current_user_public")]
  current_user_public: Option<::models::FeedsLinksCurrentUser>,
  #[serde(rename = "timeline")]
  timeline: Option<::models::FeedsLinksCurrentUser>,
  #[serde(rename = "user")]
  user: Option<::models::FeedsLinksCurrentUser>
}

impl FeedsLinks {
  pub fn new() -> FeedsLinks {
    FeedsLinks {
      current_user: None,
      current_user_actor: None,
      current_user_organization: None,
      current_user_public: None,
      timeline: None,
      user: None
    }
  }

  pub fn set_current_user(&mut self, current_user: ::models::FeedsLinksCurrentUser) {
    self.current_user = Some(current_user);
  }

  pub fn with_current_user(mut self, current_user: ::models::FeedsLinksCurrentUser) -> FeedsLinks {
    self.current_user = Some(current_user);
    self
  }

  pub fn current_user(&self) -> Option<&::models::FeedsLinksCurrentUser> {
    self.current_user.as_ref()
  }

  pub fn reset_current_user(&mut self) {
    self.current_user = None;
  }

  pub fn set_current_user_actor(&mut self, current_user_actor: ::models::FeedsLinksCurrentUser) {
    self.current_user_actor = Some(current_user_actor);
  }

  pub fn with_current_user_actor(mut self, current_user_actor: ::models::FeedsLinksCurrentUser) -> FeedsLinks {
    self.current_user_actor = Some(current_user_actor);
    self
  }

  pub fn current_user_actor(&self) -> Option<&::models::FeedsLinksCurrentUser> {
    self.current_user_actor.as_ref()
  }

  pub fn reset_current_user_actor(&mut self) {
    self.current_user_actor = None;
  }

  pub fn set_current_user_organization(&mut self, current_user_organization: ::models::FeedsLinksCurrentUser) {
    self.current_user_organization = Some(current_user_organization);
  }

  pub fn with_current_user_organization(mut self, current_user_organization: ::models::FeedsLinksCurrentUser) -> FeedsLinks {
    self.current_user_organization = Some(current_user_organization);
    self
  }

  pub fn current_user_organization(&self) -> Option<&::models::FeedsLinksCurrentUser> {
    self.current_user_organization.as_ref()
  }

  pub fn reset_current_user_organization(&mut self) {
    self.current_user_organization = None;
  }

  pub fn set_current_user_public(&mut self, current_user_public: ::models::FeedsLinksCurrentUser) {
    self.current_user_public = Some(current_user_public);
  }

  pub fn with_current_user_public(mut self, current_user_public: ::models::FeedsLinksCurrentUser) -> FeedsLinks {
    self.current_user_public = Some(current_user_public);
    self
  }

  pub fn current_user_public(&self) -> Option<&::models::FeedsLinksCurrentUser> {
    self.current_user_public.as_ref()
  }

  pub fn reset_current_user_public(&mut self) {
    self.current_user_public = None;
  }

  pub fn set_timeline(&mut self, timeline: ::models::FeedsLinksCurrentUser) {
    self.timeline = Some(timeline);
  }

  pub fn with_timeline(mut self, timeline: ::models::FeedsLinksCurrentUser) -> FeedsLinks {
    self.timeline = Some(timeline);
    self
  }

  pub fn timeline(&self) -> Option<&::models::FeedsLinksCurrentUser> {
    self.timeline.as_ref()
  }

  pub fn reset_timeline(&mut self) {
    self.timeline = None;
  }

  pub fn set_user(&mut self, user: ::models::FeedsLinksCurrentUser) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::FeedsLinksCurrentUser) -> FeedsLinks {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::FeedsLinksCurrentUser> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



