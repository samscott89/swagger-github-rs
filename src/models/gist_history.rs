/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GistHistory {
  #[serde(rename = "change_status")]
  change_status: Option<::models::CommitStats>,
  /// Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  #[serde(rename = "committed_at")]
  committed_at: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::BranchCommitAuthor>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl GistHistory {
  pub fn new() -> GistHistory {
    GistHistory {
      change_status: None,
      committed_at: None,
      url: None,
      user: None,
      version: None
    }
  }

  pub fn set_change_status(&mut self, change_status: ::models::CommitStats) {
    self.change_status = Some(change_status);
  }

  pub fn with_change_status(mut self, change_status: ::models::CommitStats) -> GistHistory {
    self.change_status = Some(change_status);
    self
  }

  pub fn change_status(&self) -> Option<&::models::CommitStats> {
    self.change_status.as_ref()
  }

  pub fn reset_change_status(&mut self) {
    self.change_status = None;
  }

  pub fn set_committed_at(&mut self, committed_at: String) {
    self.committed_at = Some(committed_at);
  }

  pub fn with_committed_at(mut self, committed_at: String) -> GistHistory {
    self.committed_at = Some(committed_at);
    self
  }

  pub fn committed_at(&self) -> Option<&String> {
    self.committed_at.as_ref()
  }

  pub fn reset_committed_at(&mut self) {
    self.committed_at = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> GistHistory {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_user(&mut self, user: ::models::BranchCommitAuthor) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::BranchCommitAuthor) -> GistHistory {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::BranchCommitAuthor> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> GistHistory {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



