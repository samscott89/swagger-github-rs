/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateDownload {
  #[serde(rename = "accesskeyid")]
  accesskeyid: Option<String>,
  #[serde(rename = "acl")]
  acl: Option<String>,
  #[serde(rename = "bucket")]
  bucket: Option<String>,
  #[serde(rename = "content_type")]
  content_type: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "download_count")]
  download_count: Option<i32>,
  /// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
  #[serde(rename = "expirationdate")]
  expirationdate: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "mime_type")]
  mime_type: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "path")]
  path: Option<String>,
  #[serde(rename = "policy")]
  policy: Option<String>,
  #[serde(rename = "prefix")]
  prefix: Option<String>,
  #[serde(rename = "redirect")]
  redirect: Option<bool>,
  #[serde(rename = "s3_url")]
  s3_url: Option<String>,
  #[serde(rename = "signature")]
  signature: Option<String>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl CreateDownload {
  pub fn new() -> CreateDownload {
    CreateDownload {
      accesskeyid: None,
      acl: None,
      bucket: None,
      content_type: None,
      description: None,
      download_count: None,
      expirationdate: None,
      html_url: None,
      id: None,
      mime_type: None,
      name: None,
      path: None,
      policy: None,
      prefix: None,
      redirect: None,
      s3_url: None,
      signature: None,
      size: None,
      url: None
    }
  }

  pub fn set_accesskeyid(&mut self, accesskeyid: String) {
    self.accesskeyid = Some(accesskeyid);
  }

  pub fn with_accesskeyid(mut self, accesskeyid: String) -> CreateDownload {
    self.accesskeyid = Some(accesskeyid);
    self
  }

  pub fn accesskeyid(&self) -> Option<&String> {
    self.accesskeyid.as_ref()
  }

  pub fn reset_accesskeyid(&mut self) {
    self.accesskeyid = None;
  }

  pub fn set_acl(&mut self, acl: String) {
    self.acl = Some(acl);
  }

  pub fn with_acl(mut self, acl: String) -> CreateDownload {
    self.acl = Some(acl);
    self
  }

  pub fn acl(&self) -> Option<&String> {
    self.acl.as_ref()
  }

  pub fn reset_acl(&mut self) {
    self.acl = None;
  }

  pub fn set_bucket(&mut self, bucket: String) {
    self.bucket = Some(bucket);
  }

  pub fn with_bucket(mut self, bucket: String) -> CreateDownload {
    self.bucket = Some(bucket);
    self
  }

  pub fn bucket(&self) -> Option<&String> {
    self.bucket.as_ref()
  }

  pub fn reset_bucket(&mut self) {
    self.bucket = None;
  }

  pub fn set_content_type(&mut self, content_type: String) {
    self.content_type = Some(content_type);
  }

  pub fn with_content_type(mut self, content_type: String) -> CreateDownload {
    self.content_type = Some(content_type);
    self
  }

  pub fn content_type(&self) -> Option<&String> {
    self.content_type.as_ref()
  }

  pub fn reset_content_type(&mut self) {
    self.content_type = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> CreateDownload {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_download_count(&mut self, download_count: i32) {
    self.download_count = Some(download_count);
  }

  pub fn with_download_count(mut self, download_count: i32) -> CreateDownload {
    self.download_count = Some(download_count);
    self
  }

  pub fn download_count(&self) -> Option<&i32> {
    self.download_count.as_ref()
  }

  pub fn reset_download_count(&mut self) {
    self.download_count = None;
  }

  pub fn set_expirationdate(&mut self, expirationdate: String) {
    self.expirationdate = Some(expirationdate);
  }

  pub fn with_expirationdate(mut self, expirationdate: String) -> CreateDownload {
    self.expirationdate = Some(expirationdate);
    self
  }

  pub fn expirationdate(&self) -> Option<&String> {
    self.expirationdate.as_ref()
  }

  pub fn reset_expirationdate(&mut self) {
    self.expirationdate = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> CreateDownload {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> CreateDownload {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_mime_type(&mut self, mime_type: String) {
    self.mime_type = Some(mime_type);
  }

  pub fn with_mime_type(mut self, mime_type: String) -> CreateDownload {
    self.mime_type = Some(mime_type);
    self
  }

  pub fn mime_type(&self) -> Option<&String> {
    self.mime_type.as_ref()
  }

  pub fn reset_mime_type(&mut self) {
    self.mime_type = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> CreateDownload {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> CreateDownload {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_policy(&mut self, policy: String) {
    self.policy = Some(policy);
  }

  pub fn with_policy(mut self, policy: String) -> CreateDownload {
    self.policy = Some(policy);
    self
  }

  pub fn policy(&self) -> Option<&String> {
    self.policy.as_ref()
  }

  pub fn reset_policy(&mut self) {
    self.policy = None;
  }

  pub fn set_prefix(&mut self, prefix: String) {
    self.prefix = Some(prefix);
  }

  pub fn with_prefix(mut self, prefix: String) -> CreateDownload {
    self.prefix = Some(prefix);
    self
  }

  pub fn prefix(&self) -> Option<&String> {
    self.prefix.as_ref()
  }

  pub fn reset_prefix(&mut self) {
    self.prefix = None;
  }

  pub fn set_redirect(&mut self, redirect: bool) {
    self.redirect = Some(redirect);
  }

  pub fn with_redirect(mut self, redirect: bool) -> CreateDownload {
    self.redirect = Some(redirect);
    self
  }

  pub fn redirect(&self) -> Option<&bool> {
    self.redirect.as_ref()
  }

  pub fn reset_redirect(&mut self) {
    self.redirect = None;
  }

  pub fn set_s3_url(&mut self, s3_url: String) {
    self.s3_url = Some(s3_url);
  }

  pub fn with_s3_url(mut self, s3_url: String) -> CreateDownload {
    self.s3_url = Some(s3_url);
    self
  }

  pub fn s3_url(&self) -> Option<&String> {
    self.s3_url.as_ref()
  }

  pub fn reset_s3_url(&mut self) {
    self.s3_url = None;
  }

  pub fn set_signature(&mut self, signature: String) {
    self.signature = Some(signature);
  }

  pub fn with_signature(mut self, signature: String) -> CreateDownload {
    self.signature = Some(signature);
    self
  }

  pub fn signature(&self) -> Option<&String> {
    self.signature.as_ref()
  }

  pub fn reset_signature(&mut self) {
    self.signature = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> CreateDownload {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> CreateDownload {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



