/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct User {
  #[serde(rename = "avatar_url")]
  avatar_url: Option<String>,
  #[serde(rename = "bio")]
  bio: Option<String>,
  #[serde(rename = "blog")]
  blog: Option<String>,
  #[serde(rename = "collaborators")]
  collaborators: Option<i32>,
  #[serde(rename = "company")]
  company: Option<String>,
  /// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "disk_usage")]
  disk_usage: Option<i32>,
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "followers")]
  followers: Option<i32>,
  #[serde(rename = "following")]
  following: Option<i32>,
  #[serde(rename = "gravatar_id")]
  gravatar_id: Option<String>,
  #[serde(rename = "hireable")]
  hireable: Option<bool>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "location")]
  location: Option<String>,
  #[serde(rename = "login")]
  login: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "owned_private_repos")]
  owned_private_repos: Option<i32>,
  #[serde(rename = "plan")]
  plan: Option<::models::UserPlan>,
  #[serde(rename = "private_gists")]
  private_gists: Option<i32>,
  #[serde(rename = "public_gists")]
  public_gists: Option<i32>,
  #[serde(rename = "public_repos")]
  public_repos: Option<i32>,
  #[serde(rename = "total_private_repos")]
  total_private_repos: Option<i32>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl User {
  pub fn new() -> User {
    User {
      avatar_url: None,
      bio: None,
      blog: None,
      collaborators: None,
      company: None,
      created_at: None,
      disk_usage: None,
      email: None,
      followers: None,
      following: None,
      gravatar_id: None,
      hireable: None,
      html_url: None,
      id: None,
      location: None,
      login: None,
      name: None,
      owned_private_repos: None,
      plan: None,
      private_gists: None,
      public_gists: None,
      public_repos: None,
      total_private_repos: None,
      _type: None,
      url: None
    }
  }

  pub fn set_avatar_url(&mut self, avatar_url: String) {
    self.avatar_url = Some(avatar_url);
  }

  pub fn with_avatar_url(mut self, avatar_url: String) -> User {
    self.avatar_url = Some(avatar_url);
    self
  }

  pub fn avatar_url(&self) -> Option<&String> {
    self.avatar_url.as_ref()
  }

  pub fn reset_avatar_url(&mut self) {
    self.avatar_url = None;
  }

  pub fn set_bio(&mut self, bio: String) {
    self.bio = Some(bio);
  }

  pub fn with_bio(mut self, bio: String) -> User {
    self.bio = Some(bio);
    self
  }

  pub fn bio(&self) -> Option<&String> {
    self.bio.as_ref()
  }

  pub fn reset_bio(&mut self) {
    self.bio = None;
  }

  pub fn set_blog(&mut self, blog: String) {
    self.blog = Some(blog);
  }

  pub fn with_blog(mut self, blog: String) -> User {
    self.blog = Some(blog);
    self
  }

  pub fn blog(&self) -> Option<&String> {
    self.blog.as_ref()
  }

  pub fn reset_blog(&mut self) {
    self.blog = None;
  }

  pub fn set_collaborators(&mut self, collaborators: i32) {
    self.collaborators = Some(collaborators);
  }

  pub fn with_collaborators(mut self, collaborators: i32) -> User {
    self.collaborators = Some(collaborators);
    self
  }

  pub fn collaborators(&self) -> Option<&i32> {
    self.collaborators.as_ref()
  }

  pub fn reset_collaborators(&mut self) {
    self.collaborators = None;
  }

  pub fn set_company(&mut self, company: String) {
    self.company = Some(company);
  }

  pub fn with_company(mut self, company: String) -> User {
    self.company = Some(company);
    self
  }

  pub fn company(&self) -> Option<&String> {
    self.company.as_ref()
  }

  pub fn reset_company(&mut self) {
    self.company = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> User {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_disk_usage(&mut self, disk_usage: i32) {
    self.disk_usage = Some(disk_usage);
  }

  pub fn with_disk_usage(mut self, disk_usage: i32) -> User {
    self.disk_usage = Some(disk_usage);
    self
  }

  pub fn disk_usage(&self) -> Option<&i32> {
    self.disk_usage.as_ref()
  }

  pub fn reset_disk_usage(&mut self) {
    self.disk_usage = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> User {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_followers(&mut self, followers: i32) {
    self.followers = Some(followers);
  }

  pub fn with_followers(mut self, followers: i32) -> User {
    self.followers = Some(followers);
    self
  }

  pub fn followers(&self) -> Option<&i32> {
    self.followers.as_ref()
  }

  pub fn reset_followers(&mut self) {
    self.followers = None;
  }

  pub fn set_following(&mut self, following: i32) {
    self.following = Some(following);
  }

  pub fn with_following(mut self, following: i32) -> User {
    self.following = Some(following);
    self
  }

  pub fn following(&self) -> Option<&i32> {
    self.following.as_ref()
  }

  pub fn reset_following(&mut self) {
    self.following = None;
  }

  pub fn set_gravatar_id(&mut self, gravatar_id: String) {
    self.gravatar_id = Some(gravatar_id);
  }

  pub fn with_gravatar_id(mut self, gravatar_id: String) -> User {
    self.gravatar_id = Some(gravatar_id);
    self
  }

  pub fn gravatar_id(&self) -> Option<&String> {
    self.gravatar_id.as_ref()
  }

  pub fn reset_gravatar_id(&mut self) {
    self.gravatar_id = None;
  }

  pub fn set_hireable(&mut self, hireable: bool) {
    self.hireable = Some(hireable);
  }

  pub fn with_hireable(mut self, hireable: bool) -> User {
    self.hireable = Some(hireable);
    self
  }

  pub fn hireable(&self) -> Option<&bool> {
    self.hireable.as_ref()
  }

  pub fn reset_hireable(&mut self) {
    self.hireable = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> User {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> User {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> User {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_login(&mut self, login: String) {
    self.login = Some(login);
  }

  pub fn with_login(mut self, login: String) -> User {
    self.login = Some(login);
    self
  }

  pub fn login(&self) -> Option<&String> {
    self.login.as_ref()
  }

  pub fn reset_login(&mut self) {
    self.login = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> User {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_owned_private_repos(&mut self, owned_private_repos: i32) {
    self.owned_private_repos = Some(owned_private_repos);
  }

  pub fn with_owned_private_repos(mut self, owned_private_repos: i32) -> User {
    self.owned_private_repos = Some(owned_private_repos);
    self
  }

  pub fn owned_private_repos(&self) -> Option<&i32> {
    self.owned_private_repos.as_ref()
  }

  pub fn reset_owned_private_repos(&mut self) {
    self.owned_private_repos = None;
  }

  pub fn set_plan(&mut self, plan: ::models::UserPlan) {
    self.plan = Some(plan);
  }

  pub fn with_plan(mut self, plan: ::models::UserPlan) -> User {
    self.plan = Some(plan);
    self
  }

  pub fn plan(&self) -> Option<&::models::UserPlan> {
    self.plan.as_ref()
  }

  pub fn reset_plan(&mut self) {
    self.plan = None;
  }

  pub fn set_private_gists(&mut self, private_gists: i32) {
    self.private_gists = Some(private_gists);
  }

  pub fn with_private_gists(mut self, private_gists: i32) -> User {
    self.private_gists = Some(private_gists);
    self
  }

  pub fn private_gists(&self) -> Option<&i32> {
    self.private_gists.as_ref()
  }

  pub fn reset_private_gists(&mut self) {
    self.private_gists = None;
  }

  pub fn set_public_gists(&mut self, public_gists: i32) {
    self.public_gists = Some(public_gists);
  }

  pub fn with_public_gists(mut self, public_gists: i32) -> User {
    self.public_gists = Some(public_gists);
    self
  }

  pub fn public_gists(&self) -> Option<&i32> {
    self.public_gists.as_ref()
  }

  pub fn reset_public_gists(&mut self) {
    self.public_gists = None;
  }

  pub fn set_public_repos(&mut self, public_repos: i32) {
    self.public_repos = Some(public_repos);
  }

  pub fn with_public_repos(mut self, public_repos: i32) -> User {
    self.public_repos = Some(public_repos);
    self
  }

  pub fn public_repos(&self) -> Option<&i32> {
    self.public_repos.as_ref()
  }

  pub fn reset_public_repos(&mut self) {
    self.public_repos = None;
  }

  pub fn set_total_private_repos(&mut self, total_private_repos: i32) {
    self.total_private_repos = Some(total_private_repos);
  }

  pub fn with_total_private_repos(mut self, total_private_repos: i32) -> User {
    self.total_private_repos = Some(total_private_repos);
    self
  }

  pub fn total_private_repos(&self) -> Option<&i32> {
    self.total_private_repos.as_ref()
  }

  pub fn reset_total_private_repos(&mut self) {
    self.total_private_repos = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> User {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> User {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



