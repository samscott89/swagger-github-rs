/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchcodeRepository {
  #[serde(rename = "archive_url")]
  archive_url: Option<String>,
  #[serde(rename = "assignees_url")]
  assignees_url: Option<String>,
  #[serde(rename = "blobs_url")]
  blobs_url: Option<String>,
  #[serde(rename = "branches_url")]
  branches_url: Option<String>,
  #[serde(rename = "collaborators_url")]
  collaborators_url: Option<String>,
  #[serde(rename = "comments_url")]
  comments_url: Option<String>,
  #[serde(rename = "commits_url")]
  commits_url: Option<String>,
  #[serde(rename = "compare_url")]
  compare_url: Option<String>,
  #[serde(rename = "contents_url")]
  contents_url: Option<String>,
  #[serde(rename = "contributors_url")]
  contributors_url: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "downloads_url")]
  downloads_url: Option<String>,
  #[serde(rename = "events_url")]
  events_url: Option<String>,
  #[serde(rename = "fork")]
  fork: Option<bool>,
  #[serde(rename = "forks_url")]
  forks_url: Option<String>,
  #[serde(rename = "full_name")]
  full_name: Option<String>,
  #[serde(rename = "git_commits_url")]
  git_commits_url: Option<String>,
  #[serde(rename = "git_refs_url")]
  git_refs_url: Option<String>,
  #[serde(rename = "git_tags_url")]
  git_tags_url: Option<String>,
  #[serde(rename = "hooks_url")]
  hooks_url: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "issue_comment_url")]
  issue_comment_url: Option<String>,
  #[serde(rename = "issue_events_url")]
  issue_events_url: Option<String>,
  #[serde(rename = "issues_url")]
  issues_url: Option<String>,
  #[serde(rename = "keys_url")]
  keys_url: Option<String>,
  #[serde(rename = "labels_url")]
  labels_url: Option<String>,
  #[serde(rename = "languages_url")]
  languages_url: Option<String>,
  #[serde(rename = "merges_url")]
  merges_url: Option<String>,
  #[serde(rename = "milestones_url")]
  milestones_url: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "notifications_url")]
  notifications_url: Option<String>,
  #[serde(rename = "owner")]
  owner: Option<::models::MergesSuccessfulAuthor>,
  #[serde(rename = "private")]
  private: Option<bool>,
  #[serde(rename = "pulls_url")]
  pulls_url: Option<String>,
  #[serde(rename = "stargazers_url")]
  stargazers_url: Option<String>,
  #[serde(rename = "statuses_url")]
  statuses_url: Option<String>,
  #[serde(rename = "subscribers_url")]
  subscribers_url: Option<String>,
  #[serde(rename = "subscription_url")]
  subscription_url: Option<String>,
  #[serde(rename = "tags_url")]
  tags_url: Option<String>,
  #[serde(rename = "teams_url")]
  teams_url: Option<String>,
  #[serde(rename = "trees_url")]
  trees_url: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl SearchcodeRepository {
  pub fn new() -> SearchcodeRepository {
    SearchcodeRepository {
      archive_url: None,
      assignees_url: None,
      blobs_url: None,
      branches_url: None,
      collaborators_url: None,
      comments_url: None,
      commits_url: None,
      compare_url: None,
      contents_url: None,
      contributors_url: None,
      description: None,
      downloads_url: None,
      events_url: None,
      fork: None,
      forks_url: None,
      full_name: None,
      git_commits_url: None,
      git_refs_url: None,
      git_tags_url: None,
      hooks_url: None,
      html_url: None,
      id: None,
      issue_comment_url: None,
      issue_events_url: None,
      issues_url: None,
      keys_url: None,
      labels_url: None,
      languages_url: None,
      merges_url: None,
      milestones_url: None,
      name: None,
      notifications_url: None,
      owner: None,
      private: None,
      pulls_url: None,
      stargazers_url: None,
      statuses_url: None,
      subscribers_url: None,
      subscription_url: None,
      tags_url: None,
      teams_url: None,
      trees_url: None,
      url: None
    }
  }

  pub fn set_archive_url(&mut self, archive_url: String) {
    self.archive_url = Some(archive_url);
  }

  pub fn with_archive_url(mut self, archive_url: String) -> SearchcodeRepository {
    self.archive_url = Some(archive_url);
    self
  }

  pub fn archive_url(&self) -> Option<&String> {
    self.archive_url.as_ref()
  }

  pub fn reset_archive_url(&mut self) {
    self.archive_url = None;
  }

  pub fn set_assignees_url(&mut self, assignees_url: String) {
    self.assignees_url = Some(assignees_url);
  }

  pub fn with_assignees_url(mut self, assignees_url: String) -> SearchcodeRepository {
    self.assignees_url = Some(assignees_url);
    self
  }

  pub fn assignees_url(&self) -> Option<&String> {
    self.assignees_url.as_ref()
  }

  pub fn reset_assignees_url(&mut self) {
    self.assignees_url = None;
  }

  pub fn set_blobs_url(&mut self, blobs_url: String) {
    self.blobs_url = Some(blobs_url);
  }

  pub fn with_blobs_url(mut self, blobs_url: String) -> SearchcodeRepository {
    self.blobs_url = Some(blobs_url);
    self
  }

  pub fn blobs_url(&self) -> Option<&String> {
    self.blobs_url.as_ref()
  }

  pub fn reset_blobs_url(&mut self) {
    self.blobs_url = None;
  }

  pub fn set_branches_url(&mut self, branches_url: String) {
    self.branches_url = Some(branches_url);
  }

  pub fn with_branches_url(mut self, branches_url: String) -> SearchcodeRepository {
    self.branches_url = Some(branches_url);
    self
  }

  pub fn branches_url(&self) -> Option<&String> {
    self.branches_url.as_ref()
  }

  pub fn reset_branches_url(&mut self) {
    self.branches_url = None;
  }

  pub fn set_collaborators_url(&mut self, collaborators_url: String) {
    self.collaborators_url = Some(collaborators_url);
  }

  pub fn with_collaborators_url(mut self, collaborators_url: String) -> SearchcodeRepository {
    self.collaborators_url = Some(collaborators_url);
    self
  }

  pub fn collaborators_url(&self) -> Option<&String> {
    self.collaborators_url.as_ref()
  }

  pub fn reset_collaborators_url(&mut self) {
    self.collaborators_url = None;
  }

  pub fn set_comments_url(&mut self, comments_url: String) {
    self.comments_url = Some(comments_url);
  }

  pub fn with_comments_url(mut self, comments_url: String) -> SearchcodeRepository {
    self.comments_url = Some(comments_url);
    self
  }

  pub fn comments_url(&self) -> Option<&String> {
    self.comments_url.as_ref()
  }

  pub fn reset_comments_url(&mut self) {
    self.comments_url = None;
  }

  pub fn set_commits_url(&mut self, commits_url: String) {
    self.commits_url = Some(commits_url);
  }

  pub fn with_commits_url(mut self, commits_url: String) -> SearchcodeRepository {
    self.commits_url = Some(commits_url);
    self
  }

  pub fn commits_url(&self) -> Option<&String> {
    self.commits_url.as_ref()
  }

  pub fn reset_commits_url(&mut self) {
    self.commits_url = None;
  }

  pub fn set_compare_url(&mut self, compare_url: String) {
    self.compare_url = Some(compare_url);
  }

  pub fn with_compare_url(mut self, compare_url: String) -> SearchcodeRepository {
    self.compare_url = Some(compare_url);
    self
  }

  pub fn compare_url(&self) -> Option<&String> {
    self.compare_url.as_ref()
  }

  pub fn reset_compare_url(&mut self) {
    self.compare_url = None;
  }

  pub fn set_contents_url(&mut self, contents_url: String) {
    self.contents_url = Some(contents_url);
  }

  pub fn with_contents_url(mut self, contents_url: String) -> SearchcodeRepository {
    self.contents_url = Some(contents_url);
    self
  }

  pub fn contents_url(&self) -> Option<&String> {
    self.contents_url.as_ref()
  }

  pub fn reset_contents_url(&mut self) {
    self.contents_url = None;
  }

  pub fn set_contributors_url(&mut self, contributors_url: String) {
    self.contributors_url = Some(contributors_url);
  }

  pub fn with_contributors_url(mut self, contributors_url: String) -> SearchcodeRepository {
    self.contributors_url = Some(contributors_url);
    self
  }

  pub fn contributors_url(&self) -> Option<&String> {
    self.contributors_url.as_ref()
  }

  pub fn reset_contributors_url(&mut self) {
    self.contributors_url = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> SearchcodeRepository {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_downloads_url(&mut self, downloads_url: String) {
    self.downloads_url = Some(downloads_url);
  }

  pub fn with_downloads_url(mut self, downloads_url: String) -> SearchcodeRepository {
    self.downloads_url = Some(downloads_url);
    self
  }

  pub fn downloads_url(&self) -> Option<&String> {
    self.downloads_url.as_ref()
  }

  pub fn reset_downloads_url(&mut self) {
    self.downloads_url = None;
  }

  pub fn set_events_url(&mut self, events_url: String) {
    self.events_url = Some(events_url);
  }

  pub fn with_events_url(mut self, events_url: String) -> SearchcodeRepository {
    self.events_url = Some(events_url);
    self
  }

  pub fn events_url(&self) -> Option<&String> {
    self.events_url.as_ref()
  }

  pub fn reset_events_url(&mut self) {
    self.events_url = None;
  }

  pub fn set_fork(&mut self, fork: bool) {
    self.fork = Some(fork);
  }

  pub fn with_fork(mut self, fork: bool) -> SearchcodeRepository {
    self.fork = Some(fork);
    self
  }

  pub fn fork(&self) -> Option<&bool> {
    self.fork.as_ref()
  }

  pub fn reset_fork(&mut self) {
    self.fork = None;
  }

  pub fn set_forks_url(&mut self, forks_url: String) {
    self.forks_url = Some(forks_url);
  }

  pub fn with_forks_url(mut self, forks_url: String) -> SearchcodeRepository {
    self.forks_url = Some(forks_url);
    self
  }

  pub fn forks_url(&self) -> Option<&String> {
    self.forks_url.as_ref()
  }

  pub fn reset_forks_url(&mut self) {
    self.forks_url = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> SearchcodeRepository {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_git_commits_url(&mut self, git_commits_url: String) {
    self.git_commits_url = Some(git_commits_url);
  }

  pub fn with_git_commits_url(mut self, git_commits_url: String) -> SearchcodeRepository {
    self.git_commits_url = Some(git_commits_url);
    self
  }

  pub fn git_commits_url(&self) -> Option<&String> {
    self.git_commits_url.as_ref()
  }

  pub fn reset_git_commits_url(&mut self) {
    self.git_commits_url = None;
  }

  pub fn set_git_refs_url(&mut self, git_refs_url: String) {
    self.git_refs_url = Some(git_refs_url);
  }

  pub fn with_git_refs_url(mut self, git_refs_url: String) -> SearchcodeRepository {
    self.git_refs_url = Some(git_refs_url);
    self
  }

  pub fn git_refs_url(&self) -> Option<&String> {
    self.git_refs_url.as_ref()
  }

  pub fn reset_git_refs_url(&mut self) {
    self.git_refs_url = None;
  }

  pub fn set_git_tags_url(&mut self, git_tags_url: String) {
    self.git_tags_url = Some(git_tags_url);
  }

  pub fn with_git_tags_url(mut self, git_tags_url: String) -> SearchcodeRepository {
    self.git_tags_url = Some(git_tags_url);
    self
  }

  pub fn git_tags_url(&self) -> Option<&String> {
    self.git_tags_url.as_ref()
  }

  pub fn reset_git_tags_url(&mut self) {
    self.git_tags_url = None;
  }

  pub fn set_hooks_url(&mut self, hooks_url: String) {
    self.hooks_url = Some(hooks_url);
  }

  pub fn with_hooks_url(mut self, hooks_url: String) -> SearchcodeRepository {
    self.hooks_url = Some(hooks_url);
    self
  }

  pub fn hooks_url(&self) -> Option<&String> {
    self.hooks_url.as_ref()
  }

  pub fn reset_hooks_url(&mut self) {
    self.hooks_url = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> SearchcodeRepository {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> SearchcodeRepository {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_issue_comment_url(&mut self, issue_comment_url: String) {
    self.issue_comment_url = Some(issue_comment_url);
  }

  pub fn with_issue_comment_url(mut self, issue_comment_url: String) -> SearchcodeRepository {
    self.issue_comment_url = Some(issue_comment_url);
    self
  }

  pub fn issue_comment_url(&self) -> Option<&String> {
    self.issue_comment_url.as_ref()
  }

  pub fn reset_issue_comment_url(&mut self) {
    self.issue_comment_url = None;
  }

  pub fn set_issue_events_url(&mut self, issue_events_url: String) {
    self.issue_events_url = Some(issue_events_url);
  }

  pub fn with_issue_events_url(mut self, issue_events_url: String) -> SearchcodeRepository {
    self.issue_events_url = Some(issue_events_url);
    self
  }

  pub fn issue_events_url(&self) -> Option<&String> {
    self.issue_events_url.as_ref()
  }

  pub fn reset_issue_events_url(&mut self) {
    self.issue_events_url = None;
  }

  pub fn set_issues_url(&mut self, issues_url: String) {
    self.issues_url = Some(issues_url);
  }

  pub fn with_issues_url(mut self, issues_url: String) -> SearchcodeRepository {
    self.issues_url = Some(issues_url);
    self
  }

  pub fn issues_url(&self) -> Option<&String> {
    self.issues_url.as_ref()
  }

  pub fn reset_issues_url(&mut self) {
    self.issues_url = None;
  }

  pub fn set_keys_url(&mut self, keys_url: String) {
    self.keys_url = Some(keys_url);
  }

  pub fn with_keys_url(mut self, keys_url: String) -> SearchcodeRepository {
    self.keys_url = Some(keys_url);
    self
  }

  pub fn keys_url(&self) -> Option<&String> {
    self.keys_url.as_ref()
  }

  pub fn reset_keys_url(&mut self) {
    self.keys_url = None;
  }

  pub fn set_labels_url(&mut self, labels_url: String) {
    self.labels_url = Some(labels_url);
  }

  pub fn with_labels_url(mut self, labels_url: String) -> SearchcodeRepository {
    self.labels_url = Some(labels_url);
    self
  }

  pub fn labels_url(&self) -> Option<&String> {
    self.labels_url.as_ref()
  }

  pub fn reset_labels_url(&mut self) {
    self.labels_url = None;
  }

  pub fn set_languages_url(&mut self, languages_url: String) {
    self.languages_url = Some(languages_url);
  }

  pub fn with_languages_url(mut self, languages_url: String) -> SearchcodeRepository {
    self.languages_url = Some(languages_url);
    self
  }

  pub fn languages_url(&self) -> Option<&String> {
    self.languages_url.as_ref()
  }

  pub fn reset_languages_url(&mut self) {
    self.languages_url = None;
  }

  pub fn set_merges_url(&mut self, merges_url: String) {
    self.merges_url = Some(merges_url);
  }

  pub fn with_merges_url(mut self, merges_url: String) -> SearchcodeRepository {
    self.merges_url = Some(merges_url);
    self
  }

  pub fn merges_url(&self) -> Option<&String> {
    self.merges_url.as_ref()
  }

  pub fn reset_merges_url(&mut self) {
    self.merges_url = None;
  }

  pub fn set_milestones_url(&mut self, milestones_url: String) {
    self.milestones_url = Some(milestones_url);
  }

  pub fn with_milestones_url(mut self, milestones_url: String) -> SearchcodeRepository {
    self.milestones_url = Some(milestones_url);
    self
  }

  pub fn milestones_url(&self) -> Option<&String> {
    self.milestones_url.as_ref()
  }

  pub fn reset_milestones_url(&mut self) {
    self.milestones_url = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> SearchcodeRepository {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_notifications_url(&mut self, notifications_url: String) {
    self.notifications_url = Some(notifications_url);
  }

  pub fn with_notifications_url(mut self, notifications_url: String) -> SearchcodeRepository {
    self.notifications_url = Some(notifications_url);
    self
  }

  pub fn notifications_url(&self) -> Option<&String> {
    self.notifications_url.as_ref()
  }

  pub fn reset_notifications_url(&mut self) {
    self.notifications_url = None;
  }

  pub fn set_owner(&mut self, owner: ::models::MergesSuccessfulAuthor) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: ::models::MergesSuccessfulAuthor) -> SearchcodeRepository {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&::models::MergesSuccessfulAuthor> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> SearchcodeRepository {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_pulls_url(&mut self, pulls_url: String) {
    self.pulls_url = Some(pulls_url);
  }

  pub fn with_pulls_url(mut self, pulls_url: String) -> SearchcodeRepository {
    self.pulls_url = Some(pulls_url);
    self
  }

  pub fn pulls_url(&self) -> Option<&String> {
    self.pulls_url.as_ref()
  }

  pub fn reset_pulls_url(&mut self) {
    self.pulls_url = None;
  }

  pub fn set_stargazers_url(&mut self, stargazers_url: String) {
    self.stargazers_url = Some(stargazers_url);
  }

  pub fn with_stargazers_url(mut self, stargazers_url: String) -> SearchcodeRepository {
    self.stargazers_url = Some(stargazers_url);
    self
  }

  pub fn stargazers_url(&self) -> Option<&String> {
    self.stargazers_url.as_ref()
  }

  pub fn reset_stargazers_url(&mut self) {
    self.stargazers_url = None;
  }

  pub fn set_statuses_url(&mut self, statuses_url: String) {
    self.statuses_url = Some(statuses_url);
  }

  pub fn with_statuses_url(mut self, statuses_url: String) -> SearchcodeRepository {
    self.statuses_url = Some(statuses_url);
    self
  }

  pub fn statuses_url(&self) -> Option<&String> {
    self.statuses_url.as_ref()
  }

  pub fn reset_statuses_url(&mut self) {
    self.statuses_url = None;
  }

  pub fn set_subscribers_url(&mut self, subscribers_url: String) {
    self.subscribers_url = Some(subscribers_url);
  }

  pub fn with_subscribers_url(mut self, subscribers_url: String) -> SearchcodeRepository {
    self.subscribers_url = Some(subscribers_url);
    self
  }

  pub fn subscribers_url(&self) -> Option<&String> {
    self.subscribers_url.as_ref()
  }

  pub fn reset_subscribers_url(&mut self) {
    self.subscribers_url = None;
  }

  pub fn set_subscription_url(&mut self, subscription_url: String) {
    self.subscription_url = Some(subscription_url);
  }

  pub fn with_subscription_url(mut self, subscription_url: String) -> SearchcodeRepository {
    self.subscription_url = Some(subscription_url);
    self
  }

  pub fn subscription_url(&self) -> Option<&String> {
    self.subscription_url.as_ref()
  }

  pub fn reset_subscription_url(&mut self) {
    self.subscription_url = None;
  }

  pub fn set_tags_url(&mut self, tags_url: String) {
    self.tags_url = Some(tags_url);
  }

  pub fn with_tags_url(mut self, tags_url: String) -> SearchcodeRepository {
    self.tags_url = Some(tags_url);
    self
  }

  pub fn tags_url(&self) -> Option<&String> {
    self.tags_url.as_ref()
  }

  pub fn reset_tags_url(&mut self) {
    self.tags_url = None;
  }

  pub fn set_teams_url(&mut self, teams_url: String) {
    self.teams_url = Some(teams_url);
  }

  pub fn with_teams_url(mut self, teams_url: String) -> SearchcodeRepository {
    self.teams_url = Some(teams_url);
    self
  }

  pub fn teams_url(&self) -> Option<&String> {
    self.teams_url.as_ref()
  }

  pub fn reset_teams_url(&mut self) {
    self.teams_url = None;
  }

  pub fn set_trees_url(&mut self, trees_url: String) {
    self.trees_url = Some(trees_url);
  }

  pub fn with_trees_url(mut self, trees_url: String) -> SearchcodeRepository {
    self.trees_url = Some(trees_url);
    self
  }

  pub fn trees_url(&self) -> Option<&String> {
    self.trees_url.as_ref()
  }

  pub fn reset_trees_url(&mut self) {
    self.trees_url = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> SearchcodeRepository {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



