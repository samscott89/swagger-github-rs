/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeleteFileCommit {
  #[serde(rename = "author")]
  author: Option<::models::ComparecommitsBaseCommitCommitAuthor>,
  #[serde(rename = "committer")]
  committer: Option<::models::ComparecommitsBaseCommitCommitAuthor>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "parents")]
  parents: Option<::models::CreateFileCommitParents>,
  #[serde(rename = "sha")]
  sha: Option<String>,
  #[serde(rename = "tree")]
  tree: Option<::models::BranchCommitCommitTree>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl DeleteFileCommit {
  pub fn new() -> DeleteFileCommit {
    DeleteFileCommit {
      author: None,
      committer: None,
      html_url: None,
      message: None,
      parents: None,
      sha: None,
      tree: None,
      url: None
    }
  }

  pub fn set_author(&mut self, author: ::models::ComparecommitsBaseCommitCommitAuthor) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::ComparecommitsBaseCommitCommitAuthor) -> DeleteFileCommit {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::ComparecommitsBaseCommitCommitAuthor> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_committer(&mut self, committer: ::models::ComparecommitsBaseCommitCommitAuthor) {
    self.committer = Some(committer);
  }

  pub fn with_committer(mut self, committer: ::models::ComparecommitsBaseCommitCommitAuthor) -> DeleteFileCommit {
    self.committer = Some(committer);
    self
  }

  pub fn committer(&self) -> Option<&::models::ComparecommitsBaseCommitCommitAuthor> {
    self.committer.as_ref()
  }

  pub fn reset_committer(&mut self) {
    self.committer = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> DeleteFileCommit {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> DeleteFileCommit {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_parents(&mut self, parents: ::models::CreateFileCommitParents) {
    self.parents = Some(parents);
  }

  pub fn with_parents(mut self, parents: ::models::CreateFileCommitParents) -> DeleteFileCommit {
    self.parents = Some(parents);
    self
  }

  pub fn parents(&self) -> Option<&::models::CreateFileCommitParents> {
    self.parents.as_ref()
  }

  pub fn reset_parents(&mut self) {
    self.parents = None;
  }

  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> DeleteFileCommit {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

  pub fn set_tree(&mut self, tree: ::models::BranchCommitCommitTree) {
    self.tree = Some(tree);
  }

  pub fn with_tree(mut self, tree: ::models::BranchCommitCommitTree) -> DeleteFileCommit {
    self.tree = Some(tree);
    self
  }

  pub fn tree(&self) -> Option<&::models::BranchCommitCommitTree> {
    self.tree.as_ref()
  }

  pub fn reset_tree(&mut self) {
    self.tree = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> DeleteFileCommit {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



