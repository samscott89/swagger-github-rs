/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepoEdit {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "has_downloads")]
  has_downloads: Option<bool>,
  #[serde(rename = "has_issues")]
  has_issues: Option<bool>,
  #[serde(rename = "has_wiki")]
  has_wiki: Option<bool>,
  #[serde(rename = "homepage")]
  homepage: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "private")]
  private: Option<bool>
}

impl RepoEdit {
  pub fn new() -> RepoEdit {
    RepoEdit {
      description: None,
      has_downloads: None,
      has_issues: None,
      has_wiki: None,
      homepage: None,
      name: None,
      private: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> RepoEdit {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_has_downloads(&mut self, has_downloads: bool) {
    self.has_downloads = Some(has_downloads);
  }

  pub fn with_has_downloads(mut self, has_downloads: bool) -> RepoEdit {
    self.has_downloads = Some(has_downloads);
    self
  }

  pub fn has_downloads(&self) -> Option<&bool> {
    self.has_downloads.as_ref()
  }

  pub fn reset_has_downloads(&mut self) {
    self.has_downloads = None;
  }

  pub fn set_has_issues(&mut self, has_issues: bool) {
    self.has_issues = Some(has_issues);
  }

  pub fn with_has_issues(mut self, has_issues: bool) -> RepoEdit {
    self.has_issues = Some(has_issues);
    self
  }

  pub fn has_issues(&self) -> Option<&bool> {
    self.has_issues.as_ref()
  }

  pub fn reset_has_issues(&mut self) {
    self.has_issues = None;
  }

  pub fn set_has_wiki(&mut self, has_wiki: bool) {
    self.has_wiki = Some(has_wiki);
  }

  pub fn with_has_wiki(mut self, has_wiki: bool) -> RepoEdit {
    self.has_wiki = Some(has_wiki);
    self
  }

  pub fn has_wiki(&self) -> Option<&bool> {
    self.has_wiki.as_ref()
  }

  pub fn reset_has_wiki(&mut self) {
    self.has_wiki = None;
  }

  pub fn set_homepage(&mut self, homepage: String) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: String) -> RepoEdit {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&String> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> RepoEdit {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> RepoEdit {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

}



