/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateFileBody {
  #[serde(rename = "committer")]
  committer: Option<::models::CreateFileBodyCommitter>,
  #[serde(rename = "content")]
  content: Option<String>,
  #[serde(rename = "message")]
  message: Option<String>
}

impl CreateFileBody {
  pub fn new() -> CreateFileBody {
    CreateFileBody {
      committer: None,
      content: None,
      message: None
    }
  }

  pub fn set_committer(&mut self, committer: ::models::CreateFileBodyCommitter) {
    self.committer = Some(committer);
  }

  pub fn with_committer(mut self, committer: ::models::CreateFileBodyCommitter) -> CreateFileBody {
    self.committer = Some(committer);
    self
  }

  pub fn committer(&self) -> Option<&::models::CreateFileBodyCommitter> {
    self.committer.as_ref()
  }

  pub fn reset_committer(&mut self) {
    self.committer = None;
  }

  pub fn set_content(&mut self, content: String) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: String) -> CreateFileBody {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&String> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> CreateFileBody {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

}



