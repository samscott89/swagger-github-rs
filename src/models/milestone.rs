/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Milestone {
  #[serde(rename = "closed_issues")]
  closed_issues: Option<i32>,
  /// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "creator")]
  creator: Option<::models::BranchCommitAuthor>,
  #[serde(rename = "description")]
  description: Option<String>,
  /// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
  #[serde(rename = "due_on")]
  due_on: Option<String>,
  #[serde(rename = "number")]
  number: Option<i32>,
  #[serde(rename = "open_issues")]
  open_issues: Option<i32>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl Milestone {
  pub fn new() -> Milestone {
    Milestone {
      closed_issues: None,
      created_at: None,
      creator: None,
      description: None,
      due_on: None,
      number: None,
      open_issues: None,
      state: None,
      title: None,
      url: None
    }
  }

  pub fn set_closed_issues(&mut self, closed_issues: i32) {
    self.closed_issues = Some(closed_issues);
  }

  pub fn with_closed_issues(mut self, closed_issues: i32) -> Milestone {
    self.closed_issues = Some(closed_issues);
    self
  }

  pub fn closed_issues(&self) -> Option<&i32> {
    self.closed_issues.as_ref()
  }

  pub fn reset_closed_issues(&mut self) {
    self.closed_issues = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Milestone {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_creator(&mut self, creator: ::models::BranchCommitAuthor) {
    self.creator = Some(creator);
  }

  pub fn with_creator(mut self, creator: ::models::BranchCommitAuthor) -> Milestone {
    self.creator = Some(creator);
    self
  }

  pub fn creator(&self) -> Option<&::models::BranchCommitAuthor> {
    self.creator.as_ref()
  }

  pub fn reset_creator(&mut self) {
    self.creator = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Milestone {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_due_on(&mut self, due_on: String) {
    self.due_on = Some(due_on);
  }

  pub fn with_due_on(mut self, due_on: String) -> Milestone {
    self.due_on = Some(due_on);
    self
  }

  pub fn due_on(&self) -> Option<&String> {
    self.due_on.as_ref()
  }

  pub fn reset_due_on(&mut self) {
    self.due_on = None;
  }

  pub fn set_number(&mut self, number: i32) {
    self.number = Some(number);
  }

  pub fn with_number(mut self, number: i32) -> Milestone {
    self.number = Some(number);
    self
  }

  pub fn number(&self) -> Option<&i32> {
    self.number.as_ref()
  }

  pub fn reset_number(&mut self) {
    self.number = None;
  }

  pub fn set_open_issues(&mut self, open_issues: i32) {
    self.open_issues = Some(open_issues);
  }

  pub fn with_open_issues(mut self, open_issues: i32) -> Milestone {
    self.open_issues = Some(open_issues);
    self
  }

  pub fn open_issues(&self) -> Option<&i32> {
    self.open_issues.as_ref()
  }

  pub fn reset_open_issues(&mut self) {
    self.open_issues = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> Milestone {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> Milestone {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> Milestone {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



