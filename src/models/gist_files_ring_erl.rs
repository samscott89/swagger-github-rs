/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GistFilesRingErl {
  #[serde(rename = "filename")]
  filename: Option<String>,
  #[serde(rename = "raw_url")]
  raw_url: Option<String>,
  #[serde(rename = "size")]
  size: Option<i32>
}

impl GistFilesRingErl {
  pub fn new() -> GistFilesRingErl {
    GistFilesRingErl {
      filename: None,
      raw_url: None,
      size: None
    }
  }

  pub fn set_filename(&mut self, filename: String) {
    self.filename = Some(filename);
  }

  pub fn with_filename(mut self, filename: String) -> GistFilesRingErl {
    self.filename = Some(filename);
    self
  }

  pub fn filename(&self) -> Option<&String> {
    self.filename.as_ref()
  }

  pub fn reset_filename(&mut self) {
    self.filename = None;
  }

  pub fn set_raw_url(&mut self, raw_url: String) {
    self.raw_url = Some(raw_url);
  }

  pub fn with_raw_url(mut self, raw_url: String) -> GistFilesRingErl {
    self.raw_url = Some(raw_url);
    self
  }

  pub fn raw_url(&self) -> Option<&String> {
    self.raw_url.as_ref()
  }

  pub fn reset_raw_url(&mut self) {
    self.raw_url = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> GistFilesRingErl {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

}



