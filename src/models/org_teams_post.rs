/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgTeamsPost {
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "permission")]
  permission: Option<String>,
  #[serde(rename = "repo_names")]
  repo_names: Option<Vec<String>>
}

impl OrgTeamsPost {
  pub fn new(name: String) -> OrgTeamsPost {
    OrgTeamsPost {
      name: name,
      permission: None,
      repo_names: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> OrgTeamsPost {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_permission(&mut self, permission: String) {
    self.permission = Some(permission);
  }

  pub fn with_permission(mut self, permission: String) -> OrgTeamsPost {
    self.permission = Some(permission);
    self
  }

  pub fn permission(&self) -> Option<&String> {
    self.permission.as_ref()
  }

  pub fn reset_permission(&mut self) {
    self.permission = None;
  }

  pub fn set_repo_names(&mut self, repo_names: Vec<String>) {
    self.repo_names = Some(repo_names);
  }

  pub fn with_repo_names(mut self, repo_names: Vec<String>) -> OrgTeamsPost {
    self.repo_names = Some(repo_names);
    self
  }

  pub fn repo_names(&self) -> Option<&Vec<String>> {
    self.repo_names.as_ref()
  }

  pub fn reset_repo_names(&mut self) {
    self.repo_names = None;
  }

}



