/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PullsPost {
  #[serde(rename = "base")]
  base: Option<String>,
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "head")]
  head: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>
}

impl PullsPost {
  pub fn new() -> PullsPost {
    PullsPost {
      base: None,
      body: None,
      head: None,
      title: None
    }
  }

  pub fn set_base(&mut self, base: String) {
    self.base = Some(base);
  }

  pub fn with_base(mut self, base: String) -> PullsPost {
    self.base = Some(base);
    self
  }

  pub fn base(&self) -> Option<&String> {
    self.base.as_ref()
  }

  pub fn reset_base(&mut self) {
    self.base = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> PullsPost {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_head(&mut self, head: String) {
    self.head = Some(head);
  }

  pub fn with_head(mut self, head: String) -> PullsPost {
    self.head = Some(head);
    self
  }

  pub fn head(&self) -> Option<&String> {
    self.head.as_ref()
  }

  pub fn reset_head(&mut self) {
    self.head = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> PullsPost {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

}



