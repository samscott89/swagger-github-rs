/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IssueBody {
  #[serde(rename = "assignee")]
  assignee: Option<String>,
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "labels")]
  labels: Option<Vec<String>>,
  #[serde(rename = "milestone")]
  milestone: Option<f32>,
  #[serde(rename = "title")]
  title: Option<String>
}

impl IssueBody {
  pub fn new() -> IssueBody {
    IssueBody {
      assignee: None,
      body: None,
      labels: None,
      milestone: None,
      title: None
    }
  }

  pub fn set_assignee(&mut self, assignee: String) {
    self.assignee = Some(assignee);
  }

  pub fn with_assignee(mut self, assignee: String) -> IssueBody {
    self.assignee = Some(assignee);
    self
  }

  pub fn assignee(&self) -> Option<&String> {
    self.assignee.as_ref()
  }

  pub fn reset_assignee(&mut self) {
    self.assignee = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> IssueBody {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_labels(&mut self, labels: Vec<String>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<String>) -> IssueBody {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<String>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_milestone(&mut self, milestone: f32) {
    self.milestone = Some(milestone);
  }

  pub fn with_milestone(mut self, milestone: f32) -> IssueBody {
    self.milestone = Some(milestone);
    self
  }

  pub fn milestone(&self) -> Option<&f32> {
    self.milestone.as_ref()
  }

  pub fn reset_milestone(&mut self) {
    self.milestone = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> IssueBody {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

}



