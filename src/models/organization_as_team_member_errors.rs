/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrganizationAsTeamMemberErrors {
  #[serde(rename = "code")]
  code: Option<String>,
  #[serde(rename = "field")]
  field: Option<String>,
  #[serde(rename = "resource")]
  resource: Option<String>
}

impl OrganizationAsTeamMemberErrors {
  pub fn new() -> OrganizationAsTeamMemberErrors {
    OrganizationAsTeamMemberErrors {
      code: None,
      field: None,
      resource: None
    }
  }

  pub fn set_code(&mut self, code: String) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: String) -> OrganizationAsTeamMemberErrors {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&String> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

  pub fn set_field(&mut self, field: String) {
    self.field = Some(field);
  }

  pub fn with_field(mut self, field: String) -> OrganizationAsTeamMemberErrors {
    self.field = Some(field);
    self
  }

  pub fn field(&self) -> Option<&String> {
    self.field.as_ref()
  }

  pub fn reset_field(&mut self) {
    self.field = None;
  }

  pub fn set_resource(&mut self, resource: String) {
    self.resource = Some(resource);
  }

  pub fn with_resource(mut self, resource: String) -> OrganizationAsTeamMemberErrors {
    self.resource = Some(resource);
    self
  }

  pub fn resource(&self) -> Option<&String> {
    self.resource.as_ref()
  }

  pub fn reset_resource(&mut self) {
    self.resource = None;
  }

}



