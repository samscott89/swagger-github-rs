/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchrepositoriesbykeywordRepositories {
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "followers")]
  followers: Option<i32>,
  #[serde(rename = "fork")]
  fork: Option<bool>,
  #[serde(rename = "forks")]
  forks: Option<i32>,
  #[serde(rename = "has_downloads")]
  has_downloads: Option<bool>,
  #[serde(rename = "has_issues")]
  has_issues: Option<bool>,
  #[serde(rename = "has_wiki")]
  has_wiki: Option<bool>,
  #[serde(rename = "homepage")]
  homepage: Option<String>,
  #[serde(rename = "language")]
  language: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "open_issues")]
  open_issues: Option<i32>,
  #[serde(rename = "owner")]
  owner: Option<String>,
  #[serde(rename = "private")]
  private: Option<bool>,
  #[serde(rename = "pushed")]
  pushed: Option<String>,
  #[serde(rename = "pushed_at")]
  pushed_at: Option<String>,
  #[serde(rename = "score")]
  score: Option<f32>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "username")]
  username: Option<String>,
  #[serde(rename = "watchers")]
  watchers: Option<i32>
}

impl SearchrepositoriesbykeywordRepositories {
  pub fn new() -> SearchrepositoriesbykeywordRepositories {
    SearchrepositoriesbykeywordRepositories {
      created: None,
      created_at: None,
      description: None,
      followers: None,
      fork: None,
      forks: None,
      has_downloads: None,
      has_issues: None,
      has_wiki: None,
      homepage: None,
      language: None,
      name: None,
      open_issues: None,
      owner: None,
      private: None,
      pushed: None,
      pushed_at: None,
      score: None,
      size: None,
      _type: None,
      url: None,
      username: None,
      watchers: None
    }
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> SearchrepositoriesbykeywordRepositories {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> SearchrepositoriesbykeywordRepositories {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> SearchrepositoriesbykeywordRepositories {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_followers(&mut self, followers: i32) {
    self.followers = Some(followers);
  }

  pub fn with_followers(mut self, followers: i32) -> SearchrepositoriesbykeywordRepositories {
    self.followers = Some(followers);
    self
  }

  pub fn followers(&self) -> Option<&i32> {
    self.followers.as_ref()
  }

  pub fn reset_followers(&mut self) {
    self.followers = None;
  }

  pub fn set_fork(&mut self, fork: bool) {
    self.fork = Some(fork);
  }

  pub fn with_fork(mut self, fork: bool) -> SearchrepositoriesbykeywordRepositories {
    self.fork = Some(fork);
    self
  }

  pub fn fork(&self) -> Option<&bool> {
    self.fork.as_ref()
  }

  pub fn reset_fork(&mut self) {
    self.fork = None;
  }

  pub fn set_forks(&mut self, forks: i32) {
    self.forks = Some(forks);
  }

  pub fn with_forks(mut self, forks: i32) -> SearchrepositoriesbykeywordRepositories {
    self.forks = Some(forks);
    self
  }

  pub fn forks(&self) -> Option<&i32> {
    self.forks.as_ref()
  }

  pub fn reset_forks(&mut self) {
    self.forks = None;
  }

  pub fn set_has_downloads(&mut self, has_downloads: bool) {
    self.has_downloads = Some(has_downloads);
  }

  pub fn with_has_downloads(mut self, has_downloads: bool) -> SearchrepositoriesbykeywordRepositories {
    self.has_downloads = Some(has_downloads);
    self
  }

  pub fn has_downloads(&self) -> Option<&bool> {
    self.has_downloads.as_ref()
  }

  pub fn reset_has_downloads(&mut self) {
    self.has_downloads = None;
  }

  pub fn set_has_issues(&mut self, has_issues: bool) {
    self.has_issues = Some(has_issues);
  }

  pub fn with_has_issues(mut self, has_issues: bool) -> SearchrepositoriesbykeywordRepositories {
    self.has_issues = Some(has_issues);
    self
  }

  pub fn has_issues(&self) -> Option<&bool> {
    self.has_issues.as_ref()
  }

  pub fn reset_has_issues(&mut self) {
    self.has_issues = None;
  }

  pub fn set_has_wiki(&mut self, has_wiki: bool) {
    self.has_wiki = Some(has_wiki);
  }

  pub fn with_has_wiki(mut self, has_wiki: bool) -> SearchrepositoriesbykeywordRepositories {
    self.has_wiki = Some(has_wiki);
    self
  }

  pub fn has_wiki(&self) -> Option<&bool> {
    self.has_wiki.as_ref()
  }

  pub fn reset_has_wiki(&mut self) {
    self.has_wiki = None;
  }

  pub fn set_homepage(&mut self, homepage: String) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: String) -> SearchrepositoriesbykeywordRepositories {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&String> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: String) -> SearchrepositoriesbykeywordRepositories {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&String> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> SearchrepositoriesbykeywordRepositories {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_open_issues(&mut self, open_issues: i32) {
    self.open_issues = Some(open_issues);
  }

  pub fn with_open_issues(mut self, open_issues: i32) -> SearchrepositoriesbykeywordRepositories {
    self.open_issues = Some(open_issues);
    self
  }

  pub fn open_issues(&self) -> Option<&i32> {
    self.open_issues.as_ref()
  }

  pub fn reset_open_issues(&mut self) {
    self.open_issues = None;
  }

  pub fn set_owner(&mut self, owner: String) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: String) -> SearchrepositoriesbykeywordRepositories {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&String> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> SearchrepositoriesbykeywordRepositories {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_pushed(&mut self, pushed: String) {
    self.pushed = Some(pushed);
  }

  pub fn with_pushed(mut self, pushed: String) -> SearchrepositoriesbykeywordRepositories {
    self.pushed = Some(pushed);
    self
  }

  pub fn pushed(&self) -> Option<&String> {
    self.pushed.as_ref()
  }

  pub fn reset_pushed(&mut self) {
    self.pushed = None;
  }

  pub fn set_pushed_at(&mut self, pushed_at: String) {
    self.pushed_at = Some(pushed_at);
  }

  pub fn with_pushed_at(mut self, pushed_at: String) -> SearchrepositoriesbykeywordRepositories {
    self.pushed_at = Some(pushed_at);
    self
  }

  pub fn pushed_at(&self) -> Option<&String> {
    self.pushed_at.as_ref()
  }

  pub fn reset_pushed_at(&mut self) {
    self.pushed_at = None;
  }

  pub fn set_score(&mut self, score: f32) {
    self.score = Some(score);
  }

  pub fn with_score(mut self, score: f32) -> SearchrepositoriesbykeywordRepositories {
    self.score = Some(score);
    self
  }

  pub fn score(&self) -> Option<&f32> {
    self.score.as_ref()
  }

  pub fn reset_score(&mut self) {
    self.score = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> SearchrepositoriesbykeywordRepositories {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> SearchrepositoriesbykeywordRepositories {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> SearchrepositoriesbykeywordRepositories {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> SearchrepositoriesbykeywordRepositories {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

  pub fn set_watchers(&mut self, watchers: i32) {
    self.watchers = Some(watchers);
  }

  pub fn with_watchers(mut self, watchers: i32) -> SearchrepositoriesbykeywordRepositories {
    self.watchers = Some(watchers);
    self
  }

  pub fn watchers(&self) -> Option<&i32> {
    self.watchers.as_ref()
  }

  pub fn reset_watchers(&mut self) {
    self.watchers = None;
  }

}



