/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ForksInner {
  #[serde(rename = "clone_url")]
  clone_url: Option<String>,
  /// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "fork")]
  fork: Option<bool>,
  #[serde(rename = "forks")]
  forks: Option<i32>,
  #[serde(rename = "forks_count")]
  forks_count: Option<i32>,
  #[serde(rename = "full_name")]
  full_name: Option<String>,
  #[serde(rename = "git_url")]
  git_url: Option<String>,
  #[serde(rename = "homepage")]
  homepage: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "language")]
  language: Option<String>,
  #[serde(rename = "master_branch")]
  master_branch: Option<String>,
  #[serde(rename = "mirror_url")]
  mirror_url: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "open_issues")]
  open_issues: Option<i32>,
  #[serde(rename = "open_issues_count")]
  open_issues_count: Option<i32>,
  #[serde(rename = "owner")]
  owner: Option<::models::BranchCommitAuthor>,
  #[serde(rename = "private")]
  private: Option<bool>,
  /// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
  #[serde(rename = "pushed_at")]
  pushed_at: Option<String>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "ssh_url")]
  ssh_url: Option<String>,
  #[serde(rename = "svn_url")]
  svn_url: Option<String>,
  /// ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "watchers")]
  watchers: Option<i32>,
  #[serde(rename = "watchers_count")]
  watchers_count: Option<i32>
}

impl ForksInner {
  pub fn new() -> ForksInner {
    ForksInner {
      clone_url: None,
      created_at: None,
      description: None,
      fork: None,
      forks: None,
      forks_count: None,
      full_name: None,
      git_url: None,
      homepage: None,
      html_url: None,
      id: None,
      language: None,
      master_branch: None,
      mirror_url: None,
      name: None,
      open_issues: None,
      open_issues_count: None,
      owner: None,
      private: None,
      pushed_at: None,
      size: None,
      ssh_url: None,
      svn_url: None,
      updated_at: None,
      url: None,
      watchers: None,
      watchers_count: None
    }
  }

  pub fn set_clone_url(&mut self, clone_url: String) {
    self.clone_url = Some(clone_url);
  }

  pub fn with_clone_url(mut self, clone_url: String) -> ForksInner {
    self.clone_url = Some(clone_url);
    self
  }

  pub fn clone_url(&self) -> Option<&String> {
    self.clone_url.as_ref()
  }

  pub fn reset_clone_url(&mut self) {
    self.clone_url = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> ForksInner {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ForksInner {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_fork(&mut self, fork: bool) {
    self.fork = Some(fork);
  }

  pub fn with_fork(mut self, fork: bool) -> ForksInner {
    self.fork = Some(fork);
    self
  }

  pub fn fork(&self) -> Option<&bool> {
    self.fork.as_ref()
  }

  pub fn reset_fork(&mut self) {
    self.fork = None;
  }

  pub fn set_forks(&mut self, forks: i32) {
    self.forks = Some(forks);
  }

  pub fn with_forks(mut self, forks: i32) -> ForksInner {
    self.forks = Some(forks);
    self
  }

  pub fn forks(&self) -> Option<&i32> {
    self.forks.as_ref()
  }

  pub fn reset_forks(&mut self) {
    self.forks = None;
  }

  pub fn set_forks_count(&mut self, forks_count: i32) {
    self.forks_count = Some(forks_count);
  }

  pub fn with_forks_count(mut self, forks_count: i32) -> ForksInner {
    self.forks_count = Some(forks_count);
    self
  }

  pub fn forks_count(&self) -> Option<&i32> {
    self.forks_count.as_ref()
  }

  pub fn reset_forks_count(&mut self) {
    self.forks_count = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> ForksInner {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_git_url(&mut self, git_url: String) {
    self.git_url = Some(git_url);
  }

  pub fn with_git_url(mut self, git_url: String) -> ForksInner {
    self.git_url = Some(git_url);
    self
  }

  pub fn git_url(&self) -> Option<&String> {
    self.git_url.as_ref()
  }

  pub fn reset_git_url(&mut self) {
    self.git_url = None;
  }

  pub fn set_homepage(&mut self, homepage: String) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: String) -> ForksInner {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&String> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> ForksInner {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> ForksInner {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_language(&mut self, language: String) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: String) -> ForksInner {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&String> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_master_branch(&mut self, master_branch: String) {
    self.master_branch = Some(master_branch);
  }

  pub fn with_master_branch(mut self, master_branch: String) -> ForksInner {
    self.master_branch = Some(master_branch);
    self
  }

  pub fn master_branch(&self) -> Option<&String> {
    self.master_branch.as_ref()
  }

  pub fn reset_master_branch(&mut self) {
    self.master_branch = None;
  }

  pub fn set_mirror_url(&mut self, mirror_url: String) {
    self.mirror_url = Some(mirror_url);
  }

  pub fn with_mirror_url(mut self, mirror_url: String) -> ForksInner {
    self.mirror_url = Some(mirror_url);
    self
  }

  pub fn mirror_url(&self) -> Option<&String> {
    self.mirror_url.as_ref()
  }

  pub fn reset_mirror_url(&mut self) {
    self.mirror_url = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ForksInner {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_open_issues(&mut self, open_issues: i32) {
    self.open_issues = Some(open_issues);
  }

  pub fn with_open_issues(mut self, open_issues: i32) -> ForksInner {
    self.open_issues = Some(open_issues);
    self
  }

  pub fn open_issues(&self) -> Option<&i32> {
    self.open_issues.as_ref()
  }

  pub fn reset_open_issues(&mut self) {
    self.open_issues = None;
  }

  pub fn set_open_issues_count(&mut self, open_issues_count: i32) {
    self.open_issues_count = Some(open_issues_count);
  }

  pub fn with_open_issues_count(mut self, open_issues_count: i32) -> ForksInner {
    self.open_issues_count = Some(open_issues_count);
    self
  }

  pub fn open_issues_count(&self) -> Option<&i32> {
    self.open_issues_count.as_ref()
  }

  pub fn reset_open_issues_count(&mut self) {
    self.open_issues_count = None;
  }

  pub fn set_owner(&mut self, owner: ::models::BranchCommitAuthor) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: ::models::BranchCommitAuthor) -> ForksInner {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&::models::BranchCommitAuthor> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> ForksInner {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_pushed_at(&mut self, pushed_at: String) {
    self.pushed_at = Some(pushed_at);
  }

  pub fn with_pushed_at(mut self, pushed_at: String) -> ForksInner {
    self.pushed_at = Some(pushed_at);
    self
  }

  pub fn pushed_at(&self) -> Option<&String> {
    self.pushed_at.as_ref()
  }

  pub fn reset_pushed_at(&mut self) {
    self.pushed_at = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> ForksInner {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_ssh_url(&mut self, ssh_url: String) {
    self.ssh_url = Some(ssh_url);
  }

  pub fn with_ssh_url(mut self, ssh_url: String) -> ForksInner {
    self.ssh_url = Some(ssh_url);
    self
  }

  pub fn ssh_url(&self) -> Option<&String> {
    self.ssh_url.as_ref()
  }

  pub fn reset_ssh_url(&mut self) {
    self.ssh_url = None;
  }

  pub fn set_svn_url(&mut self, svn_url: String) {
    self.svn_url = Some(svn_url);
  }

  pub fn with_svn_url(mut self, svn_url: String) -> ForksInner {
    self.svn_url = Some(svn_url);
    self
  }

  pub fn svn_url(&self) -> Option<&String> {
    self.svn_url.as_ref()
  }

  pub fn reset_svn_url(&mut self) {
    self.svn_url = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> ForksInner {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> ForksInner {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_watchers(&mut self, watchers: i32) {
    self.watchers = Some(watchers);
  }

  pub fn with_watchers(mut self, watchers: i32) -> ForksInner {
    self.watchers = Some(watchers);
    self
  }

  pub fn watchers(&self) -> Option<&i32> {
    self.watchers.as_ref()
  }

  pub fn reset_watchers(&mut self) {
    self.watchers = None;
  }

  pub fn set_watchers_count(&mut self, watchers_count: i32) {
    self.watchers_count = Some(watchers_count);
  }

  pub fn with_watchers_count(mut self, watchers_count: i32) -> ForksInner {
    self.watchers_count = Some(watchers_count);
    self
  }

  pub fn watchers_count(&self) -> Option<&i32> {
    self.watchers_count.as_ref()
  }

  pub fn reset_watchers_count(&mut self) {
    self.watchers_count = None;
  }

}



