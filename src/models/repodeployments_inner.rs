/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepodeploymentsInner {
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "creator")]
  creator: Option<::models::ComparecommitsBaseCommitAuthor>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "payload")]
  payload: Option<String>,
  #[serde(rename = "sha")]
  sha: Option<String>,
  #[serde(rename = "statuses_url")]
  statuses_url: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl RepodeploymentsInner {
  pub fn new() -> RepodeploymentsInner {
    RepodeploymentsInner {
      created_at: None,
      creator: None,
      description: None,
      id: None,
      payload: None,
      sha: None,
      statuses_url: None,
      updated_at: None,
      url: None
    }
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> RepodeploymentsInner {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_creator(&mut self, creator: ::models::ComparecommitsBaseCommitAuthor) {
    self.creator = Some(creator);
  }

  pub fn with_creator(mut self, creator: ::models::ComparecommitsBaseCommitAuthor) -> RepodeploymentsInner {
    self.creator = Some(creator);
    self
  }

  pub fn creator(&self) -> Option<&::models::ComparecommitsBaseCommitAuthor> {
    self.creator.as_ref()
  }

  pub fn reset_creator(&mut self) {
    self.creator = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> RepodeploymentsInner {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> RepodeploymentsInner {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_payload(&mut self, payload: String) {
    self.payload = Some(payload);
  }

  pub fn with_payload(mut self, payload: String) -> RepodeploymentsInner {
    self.payload = Some(payload);
    self
  }

  pub fn payload(&self) -> Option<&String> {
    self.payload.as_ref()
  }

  pub fn reset_payload(&mut self) {
    self.payload = None;
  }

  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> RepodeploymentsInner {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

  pub fn set_statuses_url(&mut self, statuses_url: String) {
    self.statuses_url = Some(statuses_url);
  }

  pub fn with_statuses_url(mut self, statuses_url: String) -> RepodeploymentsInner {
    self.statuses_url = Some(statuses_url);
    self
  }

  pub fn statuses_url(&self) -> Option<&String> {
    self.statuses_url.as_ref()
  }

  pub fn reset_statuses_url(&mut self) {
    self.statuses_url = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> RepodeploymentsInner {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> RepodeploymentsInner {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



