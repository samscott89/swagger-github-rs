/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepoCommitBody {
  #[serde(rename = "author")]
  author: Option<::models::ComparecommitsBaseCommitCommitAuthor>,
  #[serde(rename = "message")]
  message: String,
  #[serde(rename = "parents")]
  parents: Vec<String>,
  #[serde(rename = "tree")]
  tree: String
}

impl RepoCommitBody {
  pub fn new(message: String, parents: Vec<String>, tree: String) -> RepoCommitBody {
    RepoCommitBody {
      author: None,
      message: message,
      parents: parents,
      tree: tree
    }
  }

  pub fn set_author(&mut self, author: ::models::ComparecommitsBaseCommitCommitAuthor) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::ComparecommitsBaseCommitCommitAuthor) -> RepoCommitBody {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::ComparecommitsBaseCommitCommitAuthor> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = message;
  }

  pub fn with_message(mut self, message: String) -> RepoCommitBody {
    self.message = message;
    self
  }

  pub fn message(&self) -> &String {
    &self.message
  }


  pub fn set_parents(&mut self, parents: Vec<String>) {
    self.parents = parents;
  }

  pub fn with_parents(mut self, parents: Vec<String>) -> RepoCommitBody {
    self.parents = parents;
    self
  }

  pub fn parents(&self) -> &Vec<String> {
    &self.parents
  }


  pub fn set_tree(&mut self, tree: String) {
    self.tree = tree;
  }

  pub fn with_tree(mut self, tree: String) -> RepoCommitBody {
    self.tree = tree;
    self
  }

  pub fn tree(&self) -> &String {
    &self.tree
  }


}



