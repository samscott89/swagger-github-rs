/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PutSubscription {
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "ignored")]
  ignored: Option<bool>,
  #[serde(rename = "reason")]
  reason: Option<Value>,
  #[serde(rename = "subscribed")]
  subscribed: Option<bool>,
  #[serde(rename = "thread_url")]
  thread_url: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl PutSubscription {
  pub fn new() -> PutSubscription {
    PutSubscription {
      created_at: None,
      ignored: None,
      reason: None,
      subscribed: None,
      thread_url: None,
      url: None
    }
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> PutSubscription {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_ignored(&mut self, ignored: bool) {
    self.ignored = Some(ignored);
  }

  pub fn with_ignored(mut self, ignored: bool) -> PutSubscription {
    self.ignored = Some(ignored);
    self
  }

  pub fn ignored(&self) -> Option<&bool> {
    self.ignored.as_ref()
  }

  pub fn reset_ignored(&mut self) {
    self.ignored = None;
  }

  pub fn set_reason(&mut self, reason: Value) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: Value) -> PutSubscription {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&Value> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_subscribed(&mut self, subscribed: bool) {
    self.subscribed = Some(subscribed);
  }

  pub fn with_subscribed(mut self, subscribed: bool) -> PutSubscription {
    self.subscribed = Some(subscribed);
    self
  }

  pub fn subscribed(&self) -> Option<&bool> {
    self.subscribed.as_ref()
  }

  pub fn reset_subscribed(&mut self) {
    self.subscribed = None;
  }

  pub fn set_thread_url(&mut self, thread_url: String) {
    self.thread_url = Some(thread_url);
  }

  pub fn with_thread_url(mut self, thread_url: String) -> PutSubscription {
    self.thread_url = Some(thread_url);
    self
  }

  pub fn thread_url(&self) -> Option<&String> {
    self.thread_url.as_ref()
  }

  pub fn reset_thread_url(&mut self) {
    self.thread_url = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> PutSubscription {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



