/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BranchCommitCommit {
  #[serde(rename = "author")]
  author: Option<::models::BranchCommitCommitAuthor>,
  #[serde(rename = "committer")]
  committer: Option<::models::BranchCommitCommitAuthor>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "tree")]
  tree: Option<::models::BranchCommitCommitTree>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl BranchCommitCommit {
  pub fn new() -> BranchCommitCommit {
    BranchCommitCommit {
      author: None,
      committer: None,
      message: None,
      tree: None,
      url: None
    }
  }

  pub fn set_author(&mut self, author: ::models::BranchCommitCommitAuthor) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::BranchCommitCommitAuthor) -> BranchCommitCommit {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::BranchCommitCommitAuthor> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_committer(&mut self, committer: ::models::BranchCommitCommitAuthor) {
    self.committer = Some(committer);
  }

  pub fn with_committer(mut self, committer: ::models::BranchCommitCommitAuthor) -> BranchCommitCommit {
    self.committer = Some(committer);
    self
  }

  pub fn committer(&self) -> Option<&::models::BranchCommitCommitAuthor> {
    self.committer.as_ref()
  }

  pub fn reset_committer(&mut self) {
    self.committer = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> BranchCommitCommit {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_tree(&mut self, tree: ::models::BranchCommitCommitTree) {
    self.tree = Some(tree);
  }

  pub fn with_tree(mut self, tree: ::models::BranchCommitCommitTree) -> BranchCommitCommit {
    self.tree = Some(tree);
    self
  }

  pub fn tree(&self) -> Option<&::models::BranchCommitCommitTree> {
    self.tree.as_ref()
  }

  pub fn reset_tree(&mut self) {
    self.tree = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> BranchCommitCommit {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



