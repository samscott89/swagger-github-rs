/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MergesSuccessful {
  #[serde(rename = "author")]
  author: Option<::models::MergesSuccessfulAuthor>,
  #[serde(rename = "comments_url")]
  comments_url: Option<String>,
  #[serde(rename = "commit")]
  commit: Option<::models::MergesSuccessfulCommit>,
  #[serde(rename = "committer")]
  committer: Option<::models::MergesSuccessfulAuthor>,
  #[serde(rename = "merged")]
  merged: Option<bool>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "parents")]
  parents: Option<Vec<::models::BranchCommitCommitTree>>,
  #[serde(rename = "sha")]
  sha: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl MergesSuccessful {
  pub fn new() -> MergesSuccessful {
    MergesSuccessful {
      author: None,
      comments_url: None,
      commit: None,
      committer: None,
      merged: None,
      message: None,
      parents: None,
      sha: None,
      url: None
    }
  }

  pub fn set_author(&mut self, author: ::models::MergesSuccessfulAuthor) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::MergesSuccessfulAuthor) -> MergesSuccessful {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::MergesSuccessfulAuthor> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_comments_url(&mut self, comments_url: String) {
    self.comments_url = Some(comments_url);
  }

  pub fn with_comments_url(mut self, comments_url: String) -> MergesSuccessful {
    self.comments_url = Some(comments_url);
    self
  }

  pub fn comments_url(&self) -> Option<&String> {
    self.comments_url.as_ref()
  }

  pub fn reset_comments_url(&mut self) {
    self.comments_url = None;
  }

  pub fn set_commit(&mut self, commit: ::models::MergesSuccessfulCommit) {
    self.commit = Some(commit);
  }

  pub fn with_commit(mut self, commit: ::models::MergesSuccessfulCommit) -> MergesSuccessful {
    self.commit = Some(commit);
    self
  }

  pub fn commit(&self) -> Option<&::models::MergesSuccessfulCommit> {
    self.commit.as_ref()
  }

  pub fn reset_commit(&mut self) {
    self.commit = None;
  }

  pub fn set_committer(&mut self, committer: ::models::MergesSuccessfulAuthor) {
    self.committer = Some(committer);
  }

  pub fn with_committer(mut self, committer: ::models::MergesSuccessfulAuthor) -> MergesSuccessful {
    self.committer = Some(committer);
    self
  }

  pub fn committer(&self) -> Option<&::models::MergesSuccessfulAuthor> {
    self.committer.as_ref()
  }

  pub fn reset_committer(&mut self) {
    self.committer = None;
  }

  pub fn set_merged(&mut self, merged: bool) {
    self.merged = Some(merged);
  }

  pub fn with_merged(mut self, merged: bool) -> MergesSuccessful {
    self.merged = Some(merged);
    self
  }

  pub fn merged(&self) -> Option<&bool> {
    self.merged.as_ref()
  }

  pub fn reset_merged(&mut self) {
    self.merged = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> MergesSuccessful {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_parents(&mut self, parents: Vec<::models::BranchCommitCommitTree>) {
    self.parents = Some(parents);
  }

  pub fn with_parents(mut self, parents: Vec<::models::BranchCommitCommitTree>) -> MergesSuccessful {
    self.parents = Some(parents);
    self
  }

  pub fn parents(&self) -> Option<&Vec<::models::BranchCommitCommitTree>> {
    self.parents.as_ref()
  }

  pub fn reset_parents(&mut self) {
    self.parents = None;
  }

  pub fn set_sha(&mut self, sha: String) {
    self.sha = Some(sha);
  }

  pub fn with_sha(mut self, sha: String) -> MergesSuccessful {
    self.sha = Some(sha);
    self
  }

  pub fn sha(&self) -> Option<&String> {
    self.sha.as_ref()
  }

  pub fn reset_sha(&mut self) {
    self.sha = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> MergesSuccessful {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



