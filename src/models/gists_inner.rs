/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GistsInner {
  #[serde(rename = "comments")]
  comments: Option<i32>,
  #[serde(rename = "comments_url")]
  comments_url: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "files")]
  files: Option<::models::GistFiles>,
  #[serde(rename = "git_pull_url")]
  git_pull_url: Option<String>,
  #[serde(rename = "git_push_url")]
  git_push_url: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "public")]
  public: Option<bool>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::BranchCommitAuthor>
}

impl GistsInner {
  pub fn new() -> GistsInner {
    GistsInner {
      comments: None,
      comments_url: None,
      created_at: None,
      description: None,
      files: None,
      git_pull_url: None,
      git_push_url: None,
      html_url: None,
      id: None,
      public: None,
      url: None,
      user: None
    }
  }

  pub fn set_comments(&mut self, comments: i32) {
    self.comments = Some(comments);
  }

  pub fn with_comments(mut self, comments: i32) -> GistsInner {
    self.comments = Some(comments);
    self
  }

  pub fn comments(&self) -> Option<&i32> {
    self.comments.as_ref()
  }

  pub fn reset_comments(&mut self) {
    self.comments = None;
  }

  pub fn set_comments_url(&mut self, comments_url: String) {
    self.comments_url = Some(comments_url);
  }

  pub fn with_comments_url(mut self, comments_url: String) -> GistsInner {
    self.comments_url = Some(comments_url);
    self
  }

  pub fn comments_url(&self) -> Option<&String> {
    self.comments_url.as_ref()
  }

  pub fn reset_comments_url(&mut self) {
    self.comments_url = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> GistsInner {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> GistsInner {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_files(&mut self, files: ::models::GistFiles) {
    self.files = Some(files);
  }

  pub fn with_files(mut self, files: ::models::GistFiles) -> GistsInner {
    self.files = Some(files);
    self
  }

  pub fn files(&self) -> Option<&::models::GistFiles> {
    self.files.as_ref()
  }

  pub fn reset_files(&mut self) {
    self.files = None;
  }

  pub fn set_git_pull_url(&mut self, git_pull_url: String) {
    self.git_pull_url = Some(git_pull_url);
  }

  pub fn with_git_pull_url(mut self, git_pull_url: String) -> GistsInner {
    self.git_pull_url = Some(git_pull_url);
    self
  }

  pub fn git_pull_url(&self) -> Option<&String> {
    self.git_pull_url.as_ref()
  }

  pub fn reset_git_pull_url(&mut self) {
    self.git_pull_url = None;
  }

  pub fn set_git_push_url(&mut self, git_push_url: String) {
    self.git_push_url = Some(git_push_url);
  }

  pub fn with_git_push_url(mut self, git_push_url: String) -> GistsInner {
    self.git_push_url = Some(git_push_url);
    self
  }

  pub fn git_push_url(&self) -> Option<&String> {
    self.git_push_url.as_ref()
  }

  pub fn reset_git_push_url(&mut self) {
    self.git_push_url = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> GistsInner {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> GistsInner {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_public(&mut self, public: bool) {
    self.public = Some(public);
  }

  pub fn with_public(mut self, public: bool) -> GistsInner {
    self.public = Some(public);
    self
  }

  pub fn public(&self) -> Option<&bool> {
    self.public.as_ref()
  }

  pub fn reset_public(&mut self) {
    self.public = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> GistsInner {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_user(&mut self, user: ::models::BranchCommitAuthor) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::BranchCommitAuthor) -> GistsInner {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::BranchCommitAuthor> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



