/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PullRequest {
  #[serde(rename = "_links")]
  _links: Option<::models::PullRequestLinks>,
  #[serde(rename = "additions")]
  additions: Option<i32>,
  #[serde(rename = "base")]
  base: Option<::models::PullRequestBase>,
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "changed_files")]
  changed_files: Option<i32>,
  #[serde(rename = "closed_at")]
  closed_at: Option<String>,
  #[serde(rename = "comments")]
  comments: Option<i32>,
  #[serde(rename = "commits")]
  commits: Option<i32>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "deletions")]
  deletions: Option<i32>,
  #[serde(rename = "diff_url")]
  diff_url: Option<String>,
  #[serde(rename = "head")]
  head: Option<::models::PullRequestBase>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "issue_url")]
  issue_url: Option<String>,
  #[serde(rename = "merge_commit_sha")]
  merge_commit_sha: Option<String>,
  #[serde(rename = "mergeable")]
  mergeable: Option<bool>,
  #[serde(rename = "merged")]
  merged: Option<bool>,
  #[serde(rename = "merged_at")]
  merged_at: Option<String>,
  #[serde(rename = "merged_by")]
  merged_by: Option<::models::BranchCommitAuthor>,
  #[serde(rename = "number")]
  number: Option<i32>,
  #[serde(rename = "patch_url")]
  patch_url: Option<String>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  #[serde(rename = "user")]
  user: Option<::models::BranchCommitAuthor>
}

impl PullRequest {
  pub fn new() -> PullRequest {
    PullRequest {
      _links: None,
      additions: None,
      base: None,
      body: None,
      changed_files: None,
      closed_at: None,
      comments: None,
      commits: None,
      created_at: None,
      deletions: None,
      diff_url: None,
      head: None,
      html_url: None,
      issue_url: None,
      merge_commit_sha: None,
      mergeable: None,
      merged: None,
      merged_at: None,
      merged_by: None,
      number: None,
      patch_url: None,
      state: None,
      title: None,
      updated_at: None,
      url: None,
      user: None
    }
  }

  pub fn set__links(&mut self, _links: ::models::PullRequestLinks) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::models::PullRequestLinks) -> PullRequest {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::models::PullRequestLinks> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

  pub fn set_additions(&mut self, additions: i32) {
    self.additions = Some(additions);
  }

  pub fn with_additions(mut self, additions: i32) -> PullRequest {
    self.additions = Some(additions);
    self
  }

  pub fn additions(&self) -> Option<&i32> {
    self.additions.as_ref()
  }

  pub fn reset_additions(&mut self) {
    self.additions = None;
  }

  pub fn set_base(&mut self, base: ::models::PullRequestBase) {
    self.base = Some(base);
  }

  pub fn with_base(mut self, base: ::models::PullRequestBase) -> PullRequest {
    self.base = Some(base);
    self
  }

  pub fn base(&self) -> Option<&::models::PullRequestBase> {
    self.base.as_ref()
  }

  pub fn reset_base(&mut self) {
    self.base = None;
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> PullRequest {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_changed_files(&mut self, changed_files: i32) {
    self.changed_files = Some(changed_files);
  }

  pub fn with_changed_files(mut self, changed_files: i32) -> PullRequest {
    self.changed_files = Some(changed_files);
    self
  }

  pub fn changed_files(&self) -> Option<&i32> {
    self.changed_files.as_ref()
  }

  pub fn reset_changed_files(&mut self) {
    self.changed_files = None;
  }

  pub fn set_closed_at(&mut self, closed_at: String) {
    self.closed_at = Some(closed_at);
  }

  pub fn with_closed_at(mut self, closed_at: String) -> PullRequest {
    self.closed_at = Some(closed_at);
    self
  }

  pub fn closed_at(&self) -> Option<&String> {
    self.closed_at.as_ref()
  }

  pub fn reset_closed_at(&mut self) {
    self.closed_at = None;
  }

  pub fn set_comments(&mut self, comments: i32) {
    self.comments = Some(comments);
  }

  pub fn with_comments(mut self, comments: i32) -> PullRequest {
    self.comments = Some(comments);
    self
  }

  pub fn comments(&self) -> Option<&i32> {
    self.comments.as_ref()
  }

  pub fn reset_comments(&mut self) {
    self.comments = None;
  }

  pub fn set_commits(&mut self, commits: i32) {
    self.commits = Some(commits);
  }

  pub fn with_commits(mut self, commits: i32) -> PullRequest {
    self.commits = Some(commits);
    self
  }

  pub fn commits(&self) -> Option<&i32> {
    self.commits.as_ref()
  }

  pub fn reset_commits(&mut self) {
    self.commits = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> PullRequest {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_deletions(&mut self, deletions: i32) {
    self.deletions = Some(deletions);
  }

  pub fn with_deletions(mut self, deletions: i32) -> PullRequest {
    self.deletions = Some(deletions);
    self
  }

  pub fn deletions(&self) -> Option<&i32> {
    self.deletions.as_ref()
  }

  pub fn reset_deletions(&mut self) {
    self.deletions = None;
  }

  pub fn set_diff_url(&mut self, diff_url: String) {
    self.diff_url = Some(diff_url);
  }

  pub fn with_diff_url(mut self, diff_url: String) -> PullRequest {
    self.diff_url = Some(diff_url);
    self
  }

  pub fn diff_url(&self) -> Option<&String> {
    self.diff_url.as_ref()
  }

  pub fn reset_diff_url(&mut self) {
    self.diff_url = None;
  }

  pub fn set_head(&mut self, head: ::models::PullRequestBase) {
    self.head = Some(head);
  }

  pub fn with_head(mut self, head: ::models::PullRequestBase) -> PullRequest {
    self.head = Some(head);
    self
  }

  pub fn head(&self) -> Option<&::models::PullRequestBase> {
    self.head.as_ref()
  }

  pub fn reset_head(&mut self) {
    self.head = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> PullRequest {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_issue_url(&mut self, issue_url: String) {
    self.issue_url = Some(issue_url);
  }

  pub fn with_issue_url(mut self, issue_url: String) -> PullRequest {
    self.issue_url = Some(issue_url);
    self
  }

  pub fn issue_url(&self) -> Option<&String> {
    self.issue_url.as_ref()
  }

  pub fn reset_issue_url(&mut self) {
    self.issue_url = None;
  }

  pub fn set_merge_commit_sha(&mut self, merge_commit_sha: String) {
    self.merge_commit_sha = Some(merge_commit_sha);
  }

  pub fn with_merge_commit_sha(mut self, merge_commit_sha: String) -> PullRequest {
    self.merge_commit_sha = Some(merge_commit_sha);
    self
  }

  pub fn merge_commit_sha(&self) -> Option<&String> {
    self.merge_commit_sha.as_ref()
  }

  pub fn reset_merge_commit_sha(&mut self) {
    self.merge_commit_sha = None;
  }

  pub fn set_mergeable(&mut self, mergeable: bool) {
    self.mergeable = Some(mergeable);
  }

  pub fn with_mergeable(mut self, mergeable: bool) -> PullRequest {
    self.mergeable = Some(mergeable);
    self
  }

  pub fn mergeable(&self) -> Option<&bool> {
    self.mergeable.as_ref()
  }

  pub fn reset_mergeable(&mut self) {
    self.mergeable = None;
  }

  pub fn set_merged(&mut self, merged: bool) {
    self.merged = Some(merged);
  }

  pub fn with_merged(mut self, merged: bool) -> PullRequest {
    self.merged = Some(merged);
    self
  }

  pub fn merged(&self) -> Option<&bool> {
    self.merged.as_ref()
  }

  pub fn reset_merged(&mut self) {
    self.merged = None;
  }

  pub fn set_merged_at(&mut self, merged_at: String) {
    self.merged_at = Some(merged_at);
  }

  pub fn with_merged_at(mut self, merged_at: String) -> PullRequest {
    self.merged_at = Some(merged_at);
    self
  }

  pub fn merged_at(&self) -> Option<&String> {
    self.merged_at.as_ref()
  }

  pub fn reset_merged_at(&mut self) {
    self.merged_at = None;
  }

  pub fn set_merged_by(&mut self, merged_by: ::models::BranchCommitAuthor) {
    self.merged_by = Some(merged_by);
  }

  pub fn with_merged_by(mut self, merged_by: ::models::BranchCommitAuthor) -> PullRequest {
    self.merged_by = Some(merged_by);
    self
  }

  pub fn merged_by(&self) -> Option<&::models::BranchCommitAuthor> {
    self.merged_by.as_ref()
  }

  pub fn reset_merged_by(&mut self) {
    self.merged_by = None;
  }

  pub fn set_number(&mut self, number: i32) {
    self.number = Some(number);
  }

  pub fn with_number(mut self, number: i32) -> PullRequest {
    self.number = Some(number);
    self
  }

  pub fn number(&self) -> Option<&i32> {
    self.number.as_ref()
  }

  pub fn reset_number(&mut self) {
    self.number = None;
  }

  pub fn set_patch_url(&mut self, patch_url: String) {
    self.patch_url = Some(patch_url);
  }

  pub fn with_patch_url(mut self, patch_url: String) -> PullRequest {
    self.patch_url = Some(patch_url);
    self
  }

  pub fn patch_url(&self) -> Option<&String> {
    self.patch_url.as_ref()
  }

  pub fn reset_patch_url(&mut self) {
    self.patch_url = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> PullRequest {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> PullRequest {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> PullRequest {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> PullRequest {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_user(&mut self, user: ::models::BranchCommitAuthor) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: ::models::BranchCommitAuthor) -> PullRequest {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&::models::BranchCommitAuthor> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



