/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContributorsStatsInnerWeeks {
  /// Number of additions.
  #[serde(rename = "a")]
  a: Option<i32>,
  /// Number of commits.
  #[serde(rename = "c")]
  c: Option<i32>,
  /// Number of deletions.
  #[serde(rename = "d")]
  d: Option<i32>,
  /// Start of the week.
  #[serde(rename = "w")]
  w: Option<String>
}

impl ContributorsStatsInnerWeeks {
  pub fn new() -> ContributorsStatsInnerWeeks {
    ContributorsStatsInnerWeeks {
      a: None,
      c: None,
      d: None,
      w: None
    }
  }

  pub fn set_a(&mut self, a: i32) {
    self.a = Some(a);
  }

  pub fn with_a(mut self, a: i32) -> ContributorsStatsInnerWeeks {
    self.a = Some(a);
    self
  }

  pub fn a(&self) -> Option<&i32> {
    self.a.as_ref()
  }

  pub fn reset_a(&mut self) {
    self.a = None;
  }

  pub fn set_c(&mut self, c: i32) {
    self.c = Some(c);
  }

  pub fn with_c(mut self, c: i32) -> ContributorsStatsInnerWeeks {
    self.c = Some(c);
    self
  }

  pub fn c(&self) -> Option<&i32> {
    self.c.as_ref()
  }

  pub fn reset_c(&mut self) {
    self.c = None;
  }

  pub fn set_d(&mut self, d: i32) {
    self.d = Some(d);
  }

  pub fn with_d(mut self, d: i32) -> ContributorsStatsInnerWeeks {
    self.d = Some(d);
    self
  }

  pub fn d(&self) -> Option<&i32> {
    self.d.as_ref()
  }

  pub fn reset_d(&mut self) {
    self.d = None;
  }

  pub fn set_w(&mut self, w: String) {
    self.w = Some(w);
  }

  pub fn with_w(mut self, w: String) -> ContributorsStatsInnerWeeks {
    self.w = Some(w);
    self
  }

  pub fn w(&self) -> Option<&String> {
    self.w.as_ref()
  }

  pub fn reset_w(&mut self) {
    self.w = None;
  }

}



