/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PullsCommentPost {
  #[serde(rename = "body")]
  body: Option<String>,
  #[serde(rename = "commit_id")]
  commit_id: Option<String>,
  #[serde(rename = "path")]
  path: Option<String>,
  #[serde(rename = "position")]
  position: Option<f32>
}

impl PullsCommentPost {
  pub fn new() -> PullsCommentPost {
    PullsCommentPost {
      body: None,
      commit_id: None,
      path: None,
      position: None
    }
  }

  pub fn set_body(&mut self, body: String) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: String) -> PullsCommentPost {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&String> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

  pub fn set_commit_id(&mut self, commit_id: String) {
    self.commit_id = Some(commit_id);
  }

  pub fn with_commit_id(mut self, commit_id: String) -> PullsCommentPost {
    self.commit_id = Some(commit_id);
    self
  }

  pub fn commit_id(&self) -> Option<&String> {
    self.commit_id.as_ref()
  }

  pub fn reset_commit_id(&mut self) {
    self.commit_id = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> PullsCommentPost {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_position(&mut self, position: f32) {
    self.position = Some(position);
  }

  pub fn with_position(mut self, position: f32) -> PullsCommentPost {
    self.position = Some(position);
    self
  }

  pub fn position(&self) -> Option<&f32> {
    self.position.as_ref()
  }

  pub fn reset_position(&mut self) {
    self.position = None;
  }

}



