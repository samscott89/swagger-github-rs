/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Deployment {
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "payload")]
  payload: Option<::models::DeploymentPayload>,
  #[serde(rename = "ref")]
  _ref: Option<String>
}

impl Deployment {
  pub fn new() -> Deployment {
    Deployment {
      description: None,
      payload: None,
      _ref: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Deployment {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_payload(&mut self, payload: ::models::DeploymentPayload) {
    self.payload = Some(payload);
  }

  pub fn with_payload(mut self, payload: ::models::DeploymentPayload) -> Deployment {
    self.payload = Some(payload);
    self
  }

  pub fn payload(&self) -> Option<&::models::DeploymentPayload> {
    self.payload.as_ref()
  }

  pub fn reset_payload(&mut self) {
    self.payload = None;
  }

  pub fn set__ref(&mut self, _ref: String) {
    self._ref = Some(_ref);
  }

  pub fn with__ref(mut self, _ref: String) -> Deployment {
    self._ref = Some(_ref);
    self
  }

  pub fn _ref(&self) -> Option<&String> {
    self._ref.as_ref()
  }

  pub fn reset__ref(&mut self) {
    self._ref = None;
  }

}



