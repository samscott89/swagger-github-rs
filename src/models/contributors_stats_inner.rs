/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContributorsStatsInner {
  #[serde(rename = "author")]
  author: Option<::models::BranchCommitAuthor>,
  /// The Total number of commits authored by the contributor.
  #[serde(rename = "total")]
  total: Option<i32>,
  #[serde(rename = "weeks")]
  weeks: Option<Vec<::models::ContributorsStatsInnerWeeks>>
}

impl ContributorsStatsInner {
  pub fn new() -> ContributorsStatsInner {
    ContributorsStatsInner {
      author: None,
      total: None,
      weeks: None
    }
  }

  pub fn set_author(&mut self, author: ::models::BranchCommitAuthor) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::BranchCommitAuthor) -> ContributorsStatsInner {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::BranchCommitAuthor> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> ContributorsStatsInner {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

  pub fn set_weeks(&mut self, weeks: Vec<::models::ContributorsStatsInnerWeeks>) {
    self.weeks = Some(weeks);
  }

  pub fn with_weeks(mut self, weeks: Vec<::models::ContributorsStatsInnerWeeks>) -> ContributorsStatsInner {
    self.weeks = Some(weeks);
    self
  }

  pub fn weeks(&self) -> Option<&Vec<::models::ContributorsStatsInnerWeeks>> {
    self.weeks.as_ref()
  }

  pub fn reset_weeks(&mut self) {
    self.weeks = None;
  }

}



