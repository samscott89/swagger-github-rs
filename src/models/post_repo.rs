/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PostRepo {
  /// True to create an initial commit with empty README. Default is false.
  #[serde(rename = "auto_init")]
  auto_init: Option<bool>,
  #[serde(rename = "description")]
  description: Option<String>,
  /// Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\" Ignored if auto_init parameter is not provided. 
  #[serde(rename = "gitignore_template")]
  gitignore_template: Option<String>,
  /// True to enable downloads for this repository, false to disable them. Default is true.
  #[serde(rename = "has_downloads")]
  has_downloads: Option<bool>,
  /// True to enable issues for this repository, false to disable them. Default is true.
  #[serde(rename = "has_issues")]
  has_issues: Option<bool>,
  /// True to enable the wiki for this repository, false to disable it. Default is true.
  #[serde(rename = "has_wiki")]
  has_wiki: Option<bool>,
  #[serde(rename = "homepage")]
  homepage: Option<String>,
  #[serde(rename = "name")]
  name: String,
  /// True to create a private repository, false to create a public one. Creating private repositories requires a paid GitHub account.
  #[serde(rename = "private")]
  private: Option<bool>,
  /// The id of the team that will be granted access to this repository. This is only valid when creating a repo in an organization.
  #[serde(rename = "team_id")]
  team_id: Option<i32>
}

impl PostRepo {
  pub fn new(name: String) -> PostRepo {
    PostRepo {
      auto_init: None,
      description: None,
      gitignore_template: None,
      has_downloads: None,
      has_issues: None,
      has_wiki: None,
      homepage: None,
      name: name,
      private: None,
      team_id: None
    }
  }

  pub fn set_auto_init(&mut self, auto_init: bool) {
    self.auto_init = Some(auto_init);
  }

  pub fn with_auto_init(mut self, auto_init: bool) -> PostRepo {
    self.auto_init = Some(auto_init);
    self
  }

  pub fn auto_init(&self) -> Option<&bool> {
    self.auto_init.as_ref()
  }

  pub fn reset_auto_init(&mut self) {
    self.auto_init = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> PostRepo {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_gitignore_template(&mut self, gitignore_template: String) {
    self.gitignore_template = Some(gitignore_template);
  }

  pub fn with_gitignore_template(mut self, gitignore_template: String) -> PostRepo {
    self.gitignore_template = Some(gitignore_template);
    self
  }

  pub fn gitignore_template(&self) -> Option<&String> {
    self.gitignore_template.as_ref()
  }

  pub fn reset_gitignore_template(&mut self) {
    self.gitignore_template = None;
  }

  pub fn set_has_downloads(&mut self, has_downloads: bool) {
    self.has_downloads = Some(has_downloads);
  }

  pub fn with_has_downloads(mut self, has_downloads: bool) -> PostRepo {
    self.has_downloads = Some(has_downloads);
    self
  }

  pub fn has_downloads(&self) -> Option<&bool> {
    self.has_downloads.as_ref()
  }

  pub fn reset_has_downloads(&mut self) {
    self.has_downloads = None;
  }

  pub fn set_has_issues(&mut self, has_issues: bool) {
    self.has_issues = Some(has_issues);
  }

  pub fn with_has_issues(mut self, has_issues: bool) -> PostRepo {
    self.has_issues = Some(has_issues);
    self
  }

  pub fn has_issues(&self) -> Option<&bool> {
    self.has_issues.as_ref()
  }

  pub fn reset_has_issues(&mut self) {
    self.has_issues = None;
  }

  pub fn set_has_wiki(&mut self, has_wiki: bool) {
    self.has_wiki = Some(has_wiki);
  }

  pub fn with_has_wiki(mut self, has_wiki: bool) -> PostRepo {
    self.has_wiki = Some(has_wiki);
    self
  }

  pub fn has_wiki(&self) -> Option<&bool> {
    self.has_wiki.as_ref()
  }

  pub fn reset_has_wiki(&mut self) {
    self.has_wiki = None;
  }

  pub fn set_homepage(&mut self, homepage: String) {
    self.homepage = Some(homepage);
  }

  pub fn with_homepage(mut self, homepage: String) -> PostRepo {
    self.homepage = Some(homepage);
    self
  }

  pub fn homepage(&self) -> Option<&String> {
    self.homepage.as_ref()
  }

  pub fn reset_homepage(&mut self) {
    self.homepage = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> PostRepo {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> PostRepo {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_team_id(&mut self, team_id: i32) {
    self.team_id = Some(team_id);
  }

  pub fn with_team_id(mut self, team_id: i32) -> PostRepo {
    self.team_id = Some(team_id);
    self
  }

  pub fn team_id(&self) -> Option<&i32> {
    self.team_id.as_ref()
  }

  pub fn reset_team_id(&mut self) {
    self.team_id = None;
  }

}



