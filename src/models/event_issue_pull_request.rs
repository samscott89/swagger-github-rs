/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct EventIssuePullRequest {
  #[serde(rename = "diff_url")]
  diff_url: Option<String>,
  #[serde(rename = "html_url")]
  html_url: Option<String>,
  #[serde(rename = "patch_url")]
  patch_url: Option<String>
}

impl EventIssuePullRequest {
  pub fn new() -> EventIssuePullRequest {
    EventIssuePullRequest {
      diff_url: None,
      html_url: None,
      patch_url: None
    }
  }

  pub fn set_diff_url(&mut self, diff_url: String) {
    self.diff_url = Some(diff_url);
  }

  pub fn with_diff_url(mut self, diff_url: String) -> EventIssuePullRequest {
    self.diff_url = Some(diff_url);
    self
  }

  pub fn diff_url(&self) -> Option<&String> {
    self.diff_url.as_ref()
  }

  pub fn reset_diff_url(&mut self) {
    self.diff_url = None;
  }

  pub fn set_html_url(&mut self, html_url: String) {
    self.html_url = Some(html_url);
  }

  pub fn with_html_url(mut self, html_url: String) -> EventIssuePullRequest {
    self.html_url = Some(html_url);
    self
  }

  pub fn html_url(&self) -> Option<&String> {
    self.html_url.as_ref()
  }

  pub fn reset_html_url(&mut self) {
    self.html_url = None;
  }

  pub fn set_patch_url(&mut self, patch_url: String) {
    self.patch_url = Some(patch_url);
  }

  pub fn with_patch_url(mut self, patch_url: String) -> EventIssuePullRequest {
    self.patch_url = Some(patch_url);
    self
  }

  pub fn patch_url(&self) -> Option<&String> {
    self.patch_url.as_ref()
  }

  pub fn reset_patch_url(&mut self) {
    self.patch_url = None;
  }

}



