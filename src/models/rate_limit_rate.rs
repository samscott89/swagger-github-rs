/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RateLimitRate {
  #[serde(rename = "limit")]
  limit: Option<i32>,
  #[serde(rename = "remaining")]
  remaining: Option<i32>,
  #[serde(rename = "reset")]
  reset: Option<i32>
}

impl RateLimitRate {
  pub fn new() -> RateLimitRate {
    RateLimitRate {
      limit: None,
      remaining: None,
      reset: None
    }
  }

  pub fn set_limit(&mut self, limit: i32) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: i32) -> RateLimitRate {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&i32> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

  pub fn set_remaining(&mut self, remaining: i32) {
    self.remaining = Some(remaining);
  }

  pub fn with_remaining(mut self, remaining: i32) -> RateLimitRate {
    self.remaining = Some(remaining);
    self
  }

  pub fn remaining(&self) -> Option<&i32> {
    self.remaining.as_ref()
  }

  pub fn reset_remaining(&mut self) {
    self.remaining = None;
  }

  pub fn set_reset(&mut self, reset: i32) {
    self.reset = Some(reset);
  }

  pub fn with_reset(mut self, reset: i32) -> RateLimitRate {
    self.reset = Some(reset);
    self
  }

  pub fn reset(&self) -> Option<&i32> {
    self.reset.as_ref()
  }

  pub fn reset_reset(&mut self) {
    self.reset = None;
  }

}



