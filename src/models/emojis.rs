/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Emojis {
  #[serde(rename = "100")]
  var_100: Option<String>,
  #[serde(rename = "1234")]
  var_1234: Option<String>,
  #[serde(rename = "+1")]
  var_1: Option<String>,
  #[serde(rename = "-1")]
  _1: Option<String>,
  #[serde(rename = "8ball")]
  var_8ball: Option<String>,
  #[serde(rename = "a")]
  a: Option<String>,
  #[serde(rename = "ab")]
  ab: Option<String>
}

impl Emojis {
  pub fn new() -> Emojis {
    Emojis {
      var_100: None,
      var_1234: None,
      var_1: None,
      _1: None,
      var_8ball: None,
      a: None,
      ab: None
    }
  }

  pub fn set_var_100(&mut self, var_100: String) {
    self.var_100 = Some(var_100);
  }

  pub fn with_var_100(mut self, var_100: String) -> Emojis {
    self.var_100 = Some(var_100);
    self
  }

  pub fn var_100(&self) -> Option<&String> {
    self.var_100.as_ref()
  }

  pub fn reset_var_100(&mut self) {
    self.var_100 = None;
  }

  pub fn set_var_1234(&mut self, var_1234: String) {
    self.var_1234 = Some(var_1234);
  }

  pub fn with_var_1234(mut self, var_1234: String) -> Emojis {
    self.var_1234 = Some(var_1234);
    self
  }

  pub fn var_1234(&self) -> Option<&String> {
    self.var_1234.as_ref()
  }

  pub fn reset_var_1234(&mut self) {
    self.var_1234 = None;
  }

  pub fn set_var_1(&mut self, var_1: String) {
    self.var_1 = Some(var_1);
  }

  pub fn with_var_1(mut self, var_1: String) -> Emojis {
    self.var_1 = Some(var_1);
    self
  }

  pub fn var_1(&self) -> Option<&String> {
    self.var_1.as_ref()
  }

  pub fn reset_var_1(&mut self) {
    self.var_1 = None;
  }

  pub fn set__1(&mut self, _1: String) {
    self._1 = Some(_1);
  }

  pub fn with__1(mut self, _1: String) -> Emojis {
    self._1 = Some(_1);
    self
  }

  pub fn _1(&self) -> Option<&String> {
    self._1.as_ref()
  }

  pub fn reset__1(&mut self) {
    self._1 = None;
  }

  pub fn set_var_8ball(&mut self, var_8ball: String) {
    self.var_8ball = Some(var_8ball);
  }

  pub fn with_var_8ball(mut self, var_8ball: String) -> Emojis {
    self.var_8ball = Some(var_8ball);
    self
  }

  pub fn var_8ball(&self) -> Option<&String> {
    self.var_8ball.as_ref()
  }

  pub fn reset_var_8ball(&mut self) {
    self.var_8ball = None;
  }

  pub fn set_a(&mut self, a: String) {
    self.a = Some(a);
  }

  pub fn with_a(mut self, a: String) -> Emojis {
    self.a = Some(a);
    self
  }

  pub fn a(&self) -> Option<&String> {
    self.a.as_ref()
  }

  pub fn reset_a(&mut self) {
    self.a = None;
  }

  pub fn set_ab(&mut self, ab: String) {
    self.ab = Some(ab);
  }

  pub fn with_ab(mut self, ab: String) -> Emojis {
    self.ab = Some(ab);
    self
  }

  pub fn ab(&self) -> Option<&String> {
    self.ab.as_ref()
  }

  pub fn reset_ab(&mut self) {
    self.ab = None;
  }

}



