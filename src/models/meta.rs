/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Meta {
  #[serde(rename = "git")]
  git: Option<Vec<String>>,
  #[serde(rename = "hooks")]
  hooks: Option<Vec<String>>
}

impl Meta {
  pub fn new() -> Meta {
    Meta {
      git: None,
      hooks: None
    }
  }

  pub fn set_git(&mut self, git: Vec<String>) {
    self.git = Some(git);
  }

  pub fn with_git(mut self, git: Vec<String>) -> Meta {
    self.git = Some(git);
    self
  }

  pub fn git(&self) -> Option<&Vec<String>> {
    self.git.as_ref()
  }

  pub fn reset_git(&mut self) {
    self.git = None;
  }

  pub fn set_hooks(&mut self, hooks: Vec<String>) {
    self.hooks = Some(hooks);
  }

  pub fn with_hooks(mut self, hooks: Vec<String>) -> Meta {
    self.hooks = Some(hooks);
    self
  }

  pub fn hooks(&self) -> Option<&Vec<String>> {
    self.hooks.as_ref()
  }

  pub fn reset_hooks(&mut self) {
    self.hooks = None;
  }

}



