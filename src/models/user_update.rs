/* 
 * GitHub
 *
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserUpdate {
  #[serde(rename = "bio")]
  bio: Option<String>,
  #[serde(rename = "blog")]
  blog: Option<String>,
  #[serde(rename = "company")]
  company: Option<String>,
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "hireable")]
  hireable: Option<bool>,
  #[serde(rename = "location")]
  location: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl UserUpdate {
  pub fn new() -> UserUpdate {
    UserUpdate {
      bio: None,
      blog: None,
      company: None,
      email: None,
      hireable: None,
      location: None,
      name: None
    }
  }

  pub fn set_bio(&mut self, bio: String) {
    self.bio = Some(bio);
  }

  pub fn with_bio(mut self, bio: String) -> UserUpdate {
    self.bio = Some(bio);
    self
  }

  pub fn bio(&self) -> Option<&String> {
    self.bio.as_ref()
  }

  pub fn reset_bio(&mut self) {
    self.bio = None;
  }

  pub fn set_blog(&mut self, blog: String) {
    self.blog = Some(blog);
  }

  pub fn with_blog(mut self, blog: String) -> UserUpdate {
    self.blog = Some(blog);
    self
  }

  pub fn blog(&self) -> Option<&String> {
    self.blog.as_ref()
  }

  pub fn reset_blog(&mut self) {
    self.blog = None;
  }

  pub fn set_company(&mut self, company: String) {
    self.company = Some(company);
  }

  pub fn with_company(mut self, company: String) -> UserUpdate {
    self.company = Some(company);
    self
  }

  pub fn company(&self) -> Option<&String> {
    self.company.as_ref()
  }

  pub fn reset_company(&mut self) {
    self.company = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> UserUpdate {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_hireable(&mut self, hireable: bool) {
    self.hireable = Some(hireable);
  }

  pub fn with_hireable(mut self, hireable: bool) -> UserUpdate {
    self.hireable = Some(hireable);
    self
  }

  pub fn hireable(&self) -> Option<&bool> {
    self.hireable.as_ref()
  }

  pub fn reset_hireable(&mut self) {
    self.hireable = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> UserUpdate {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> UserUpdate {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



